// generated by Fast Light User Interface Designer (fluid) version 1.0309

#include "gettext.h"
#include "lgbook.h"
#include <config.h>
#include <FL/Fl_Pixmap.H>
#include "flmisc.h"
#include "logsupport.h"
#include "pixmaps.h"

Fl_Double_Window *wExport=(Fl_Double_Window *)0;

Fl_Check_Browser *chkExportBrowser=(Fl_Check_Browser *)0;

Fl_Button *btnClearAll=(Fl_Button *)0;

static void cb_btnClearAll(Fl_Button*, void*) {
  btn_export_by_date->value(0);
chkExportBrowser->check_none();
}

Fl_Button *btnCheckAll=(Fl_Button *)0;

static void cb_btnCheckAll(Fl_Button*, void*) {
  btn_export_by_date->value(0);
chkExportBrowser->check_all();
}

Fl_DateInput *inp_export_start_date=(Fl_DateInput *)0;

static void cb_inp_export_start_date(Fl_DateInput*, void*) {
  cb_export_date_select();
}

Fl_DateInput *inp_export_stop_date=(Fl_DateInput *)0;

static void cb_inp_export_stop_date(Fl_DateInput*, void*) {
  cb_export_date_select();
}

Fl_Check_Button *btn_export_by_date=(Fl_Check_Button *)0;

static void cb_btn_export_by_date(Fl_Check_Button*, void*) {
  cb_export_date_select();
}

Fl_Check_Button *btnSelectCall=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectName=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectFreq=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectBand=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectMode=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSOdateOn=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSOdateOff=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTimeON=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTimeOFF=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTX_pwr=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectRSTsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectRSTrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQth=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectLOC=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectState=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectAge=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectStaCall=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectStaCity=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectStaGrid=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectOperator=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectProvince=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCountry=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectNotes=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSLrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSLsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelecteQSLrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelecteQSLsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectLOTWrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectLOTWsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSL_VIA=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSerialIN=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSerialOUT=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCheck=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectXchgIn=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectMyXchg=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCNTY=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCONT=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCQZ=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectDXCC=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectIOTA=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectITUZ=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectClass=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSection=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelect_cwss_serno=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelect_cwss_prec=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelect_cwss_check=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelect_cwss_section=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelect_1010=(Fl_Check_Button *)0;

Fl_Button *btnClearAllFields=(Fl_Button *)0;

static void cb_btnClearAllFields(Fl_Button*, void*) {
  btnSelectCall->value(0);
btnSelectName->value(0);
btnSelectFreq->value(0);
btnSelectBand->value(0);
btnSelectMode->value(0);
btnSelectQSOdateOn->value(0);
btnSelectQSOdateOff->value(0);
btnSelectTimeON->value(0);
btnSelectTimeOFF->value(0);
btnSelectTX_pwr->value(0);
btnSelectRSTsent->value(0);
btnSelectRSTrcvd->value(0);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectAge->value(0);

btnSelectStaCall->value(0);
btnSelectStaGrid->value(0);
btnSelectStaCity->value(0);
btnSelectOperator->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectNotes->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelecteQSLrcvd->value(0);
btnSelecteQSLsent->value(0);
btnSelectLOTWrcvd->value(0);
btnSelectLOTWsent->value(0);
btnSelectQSL_VIA->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);

btnSelectCheck->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectDXCC->value(0);
btnSelectIOTA->value(0);
btnSelectITUZ->value(0);
btnSelectClass->value(0);
btnSelectSection->value(0);
btnSelect_cwss_serno->value(0);
btnSelect_cwss_prec->value(0);
btnSelect_cwss_check->value(0);
btnSelect_1010->value(0);
}

Fl_Button *btnCheckAllFields=(Fl_Button *)0;

static void cb_btnCheckAllFields(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(1);
btnSelectFreq->value(1);
btnSelectBand->value(1);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(1);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(1);
btnSelectTX_pwr->value(1);
btnSelectRSTsent->value(1);
btnSelectRSTrcvd->value(1);
btnSelectQth->value(1);
btnSelectLOC->value(1);
btnSelectState->value(1);
btnSelectAge->value(1);

btnSelectStaCall->value(1);
btnSelectStaGrid->value(1);
btnSelectStaCity->value(1);
btnSelectOperator->value(1);
btnSelectProvince->value(1);
btnSelectCountry->value(1);
btnSelectNotes->value(1);
btnSelectQSLrcvd->value(1);
btnSelectQSLsent->value(1);
btnSelecteQSLrcvd->value(1);
btnSelecteQSLsent->value(1);
btnSelectLOTWrcvd->value(1);
btnSelectLOTWsent->value(1);
btnSelectQSL_VIA->value(1);
btnSelectSerialIN->value(1);
btnSelectSerialOUT->value(1);

btnSelectCheck->value(1);
btnSelectXchgIn->value(1);
btnSelectMyXchg->value(1);
btnSelectCNTY->value(1);
btnSelectCONT->value(1);
btnSelectCQZ->value(1);
btnSelectDXCC->value(1);
btnSelectIOTA->value(1);
btnSelectITUZ->value(1);
btnSelectClass->value(1);
btnSelectSection->value(1);
btnSelect_cwss_serno->value(1);
btnSelect_cwss_prec->value(1);
btnSelect_cwss_check->value(1);
btnSelect_cwss_section->value(1);
btnSelect_1010->value(1);
}

Fl_Button *btnSetFieldDefaults=(Fl_Button *)0;

static void cb_btnSetFieldDefaults(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(1);
btnSelectFreq->value(1);
btnSelectBand->value(1);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(1);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(1);
btnSelectTX_pwr->value(0);
btnSelectRSTsent->value(1);
btnSelectRSTrcvd->value(1);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectAge->value(0);

btnSelectStaCall->value(0);
btnSelectStaGrid->value(0);
btnSelectStaCity->value(0);
btnSelectOperator->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectNotes->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelecteQSLrcvd->value(0);
btnSelecteQSLsent->value(0);
btnSelectLOTWrcvd->value(0);
btnSelectLOTWsent->value(0);
btnSelectQSL_VIA->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);

btnSelectCheck->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectDXCC->value(0);
btnSelectIOTA->value(0);
btnSelectITUZ->value(0);
btnSelectClass->value(0);
btnSelectSection->value(0);
btnSelect_cwss_serno->value(0);
btnSelect_cwss_prec->value(0);
btnSelect_cwss_check->value(0);
btnSelect_1010->value(0);
}

Fl_Button *btnSetLoTWfields=(Fl_Button *)0;

static void cb_btnSetLoTWfields(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(0);
btnSelectFreq->value(1);
btnSelectBand->value(0);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(0);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(0);
btnSelectTX_pwr->value(0);
btnSelectRSTsent->value(0);
btnSelectRSTrcvd->value(0);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectAge->value(0);

btnSelectStaCall->value(0);
btnSelectStaGrid->value(0);
btnSelectStaCity->value(0);
btnSelectOperator->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectNotes->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelecteQSLrcvd->value(0);
btnSelecteQSLsent->value(0);
btnSelectLOTWrcvd->value(0);
btnSelectLOTWsent->value(0);
btnSelectQSL_VIA->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);

btnSelectCheck->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectDXCC->value(0);
btnSelectIOTA->value(0);
btnSelectITUZ->value(0);
btnSelectClass->value(0);
btnSelectSection->value(0);
btnSelect_cwss_serno->value(0);
btnSelect_cwss_prec->value(0);
btnSelect_cwss_check->value(0);
btnSelect_1010->value(0);
}

Fl_Return_Button *btnOK=(Fl_Return_Button *)0;

static void cb_btnOK(Fl_Return_Button*, void*) {
  wExport->hide();
Export_log();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  wExport->hide();
}

Fl_Double_Window *dlgLogbook=(Fl_Double_Window *)0;

Fl_DateInput *inpDate_log=(Fl_DateInput *)0;

Fl_Input2 *inpTimeOn_log=(Fl_Input2 *)0;

Fl_Input2 *inpCall_log=(Fl_Input2 *)0;

Fl_Input2 *inpName_log=(Fl_Input2 *)0;

Fl_Input2 *inpRstR_log=(Fl_Input2 *)0;

Fl_Input2 *txtNbrRecs_log=(Fl_Input2 *)0;

Fl_DateInput *inpDateOff_log=(Fl_DateInput *)0;

Fl_Input2 *inpTimeOff_log=(Fl_Input2 *)0;

Fl_Input2 *inpFreq_log=(Fl_Input2 *)0;

Fl_Input2 *inpMode_log=(Fl_Input2 *)0;

Fl_Input2 *inpTX_pwr_log=(Fl_Input2 *)0;

Fl_Input2 *inpLoc_log=(Fl_Input2 *)0;

Fl_Input2 *inpRstS_log=(Fl_Input2 *)0;

Fl_Input2 *inpQth_log=(Fl_Input2 *)0;

Fl_Input2 *inpState_log=(Fl_Input2 *)0;

Fl_Input2 *inpVE_Prov_log=(Fl_Input2 *)0;

Fl_Input2 *inpCountry_log=(Fl_Input2 *)0;

Fl_Group *grpTabsSearch=(Fl_Group *)0;

Fl_Tabs *Tabs=(Fl_Tabs *)0;

Fl_Group *tab_log_qsl=(Fl_Group *)0;

Fl_DateInput *inpQSLrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpEQSLrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpLOTWrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpQSLsentdate_log=(Fl_DateInput *)0;

Fl_DateInput *inpEQSLsentdate_log=(Fl_DateInput *)0;

Fl_DateInput *inpLOTWsentdate_log=(Fl_DateInput *)0;

Fl_Input2 *inpQSL_VIA_log=(Fl_Input2 *)0;

Fl_Group *tab_log_other=(Fl_Group *)0;

Fl_Input2 *inpCNTY_log=(Fl_Input2 *)0;

Fl_Input2 *inpIOTA_log=(Fl_Input2 *)0;

Fl_Input2 *inpCQZ_log=(Fl_Input2 *)0;

Fl_Input2 *inpCONT_log=(Fl_Input2 *)0;

Fl_Input2 *inpITUZ_log=(Fl_Input2 *)0;

Fl_Input2 *inpDXCC_log=(Fl_Input2 *)0;

Fl_Group *tab_log_notes=(Fl_Group *)0;

Fl_Input2 *inpNotes_log=(Fl_Input2 *)0;

Fl_Group *tab_log_my_station=(Fl_Group *)0;

Fl_Input2 *inp_log_sta_call=(Fl_Input2 *)0;

Fl_Input2 *inp_log_op_call=(Fl_Input2 *)0;

Fl_Input2 *inp_log_sta_qth=(Fl_Input2 *)0;

Fl_Input2 *inp_log_sta_loc=(Fl_Input2 *)0;

Fl_Group *tab_log_contest=(Fl_Group *)0;

Fl_Input2 *inpSerNoOut_log=(Fl_Input2 *)0;

Fl_Input2 *inpMyXchg_log=(Fl_Input2 *)0;

Fl_Input2 *inpSerNoIn_log=(Fl_Input2 *)0;

Fl_Input2 *inpXchgIn_log=(Fl_Input2 *)0;

Fl_Input2 *inpClass_log=(Fl_Input2 *)0;

Fl_Input2 *inpSection_log=(Fl_Input2 *)0;

Fl_Input2 *inp_age_log=(Fl_Input2 *)0;

Fl_Input2 *inp_1010_log=(Fl_Input2 *)0;

Fl_Input2 *inpBand_log=(Fl_Input2 *)0;

Fl_Input2 *inp_check_log=(Fl_Input2 *)0;

Fl_Group *tab_log_cwss=(Fl_Group *)0;

Fl_Input2 *inp_log_cwss_serno=(Fl_Input2 *)0;

Fl_Input2 *inp_log_cwss_sec=(Fl_Input2 *)0;

Fl_Input2 *inp_log_cwss_prec=(Fl_Input2 *)0;

Fl_Input2 *inp_log_cwss_chk=(Fl_Input2 *)0;

Fl_Group *tab_log_jota=(Fl_Group *)0;

Fl_Input2 *inp_log_troop_s=(Fl_Input2 *)0;

Fl_Input2 *inp_log_troop_r=(Fl_Input2 *)0;

Fl_Input2 *inp_log_scout_s=(Fl_Input2 *)0;

Fl_Input2 *inp_log_scout_r=(Fl_Input2 *)0;

Fl_Group *grpCallSearch=(Fl_Group *)0;

Fl_Input2 *inpSearchString=(Fl_Input2 *)0;

Fl_Button *bSearchPrev=(Fl_Button *)0;

Fl_Button *bSearchNext=(Fl_Button *)0;

Fl_Button *bRetrieve=(Fl_Button *)0;

Fl_Group *grpFileButtons=(Fl_Group *)0;

Fl_Button *bNewSave=(Fl_Button *)0;

Fl_Button *bUpdateCancel=(Fl_Button *)0;

Fl_Button *bDelete=(Fl_Button *)0;

Fl_Output *txtLogFile=(Fl_Output *)0;

Table *wBrowser=(Table *)0;

Fl_Double_Window *wCabrillo=(Fl_Double_Window *)0;

Fl_Check_Browser *chkCabBrowser=(Fl_Check_Browser *)0;

Fl_Button *btnCabClearAll=(Fl_Button *)0;

static void cb_btnCabClearAll(Fl_Button*, void*) {
  chkCabBrowser->check_none();
}

Fl_Button *btnCabCheckAll=(Fl_Button *)0;

static void cb_btnCabCheckAll(Fl_Button*, void*) {
  chkCabBrowser->check_all();
}

Fl_Return_Button *btnCabOK=(Fl_Return_Button *)0;

static void cb_btnCabOK(Fl_Return_Button*, void*) {
  wCabrillo->hide();
WriteCabrillo();
}

Fl_Button *btnCabCancel=(Fl_Button *)0;

static void cb_btnCabCancel(Fl_Button*, void*) {
  wCabrillo->hide();
}

Fl_ComboBox *cboContest=(Fl_ComboBox *)0;

static void cb_cboContest(Fl_ComboBox*, void*) {
  setContestType();
}

Fl_Check_Button *btnCabCall=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabFreq=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabMode=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabQSOdate=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabTimeOFF=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabRSTsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabRSTrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabSerialIN=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabSerialOUT=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabXchgIn=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabMyXchg=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabState=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabCounty=(Fl_Check_Button *)0;

Fl_Button *btnCabClearAllFields=(Fl_Button *)0;

static void cb_btnCabClearAllFields(Fl_Button*, void*) {
  btnCabCall->value(0);
btnCabFreq->value(0);
btnCabMode->value(0);
btnCabQSOdate->value(0);
btnCabTimeOFF->value(0);
btnCabSerialIN->value(0);
btnCabSerialOUT->value(0);
btnCabXchgIn->value(0);
btnCabMyXchg->value(0);
btnCabRSTsent->value(0);
btnCabRSTrcvd->value(0);
}

Fl_Button *btnCabCheckAllFields=(Fl_Button *)0;

static void cb_btnCabCheckAllFields(Fl_Button*, void*) {
  btnCabCall->value(1);
btnCabFreq->value(1);
btnCabMode->value(1);
btnCabQSOdate->value(1);
btnCabTimeOFF->value(1);
btnCabSerialIN->value(1);
btnCabSerialOUT->value(1);
btnCabXchgIn->value(1);
btnCabMyXchg->value(1);
btnCabRSTsent->value(1);
btnCabRSTrcvd->value(1);
}

Fl_Double_Window *wUDPfields=(Fl_Double_Window *)0;

Fl_Check_Button *btn_udp_Call=(Fl_Check_Button *)0;

static void cb_btn_udp_Call(Fl_Check_Button* o, void*) {
  udp_fields.call = o->value();
}

Fl_Check_Button *btn_udp_Name=(Fl_Check_Button *)0;

static void cb_btn_udp_Name(Fl_Check_Button* o, void*) {
  udp_fields.name = o->value();
}

Fl_Check_Button *btn_udp_Freq=(Fl_Check_Button *)0;

static void cb_btn_udp_Freq(Fl_Check_Button* o, void*) {
  udp_fields.freq = o->value();
}

Fl_Check_Button *btn_udp_Band=(Fl_Check_Button *)0;

static void cb_btn_udp_Band(Fl_Check_Button* o, void*) {
  udp_fields.band = o->value();
}

Fl_Check_Button *btn_udp_Mode=(Fl_Check_Button *)0;

static void cb_btn_udp_Mode(Fl_Check_Button* o, void*) {
  udp_fields.mode = o->value();
}

Fl_Check_Button *btn_udp_QSOdateOn=(Fl_Check_Button *)0;

static void cb_btn_udp_QSOdateOn(Fl_Check_Button* o, void*) {
  udp_fields.date_on = o->value();
}

Fl_Check_Button *btn_udp_QSOdateOff=(Fl_Check_Button *)0;

static void cb_btn_udp_QSOdateOff(Fl_Check_Button* o, void*) {
  udp_fields.date_off = o->value();
}

Fl_Check_Button *btn_udp_TimeON=(Fl_Check_Button *)0;

static void cb_btn_udp_TimeON(Fl_Check_Button* o, void*) {
  udp_fields.time_on = o->value();
}

Fl_Check_Button *btn_udp_TimeOFF=(Fl_Check_Button *)0;

static void cb_btn_udp_TimeOFF(Fl_Check_Button* o, void*) {
  udp_fields.time_off = o->value();
}

Fl_Check_Button *btn_udp_TX_pwr=(Fl_Check_Button *)0;

static void cb_btn_udp_TX_pwr(Fl_Check_Button* o, void*) {
  udp_fields.tx_pwr = o->value();
}

Fl_Check_Button *btn_udp_RSTsent=(Fl_Check_Button *)0;

static void cb_btn_udp_RSTsent(Fl_Check_Button* o, void*) {
  udp_fields.rst_sent = o->value();
}

Fl_Check_Button *btn_udp_RSTrcvd=(Fl_Check_Button *)0;

static void cb_btn_udp_RSTrcvd(Fl_Check_Button* o, void*) {
  udp_fields.rst_rcvd = o->value();
}

Fl_Check_Button *btn_udp_Qth=(Fl_Check_Button *)0;

static void cb_btn_udp_Qth(Fl_Check_Button* o, void*) {
  udp_fields.qth = o->value();
}

Fl_Check_Button *btn_udp_LOC=(Fl_Check_Button *)0;

static void cb_btn_udp_LOC(Fl_Check_Button* o, void*) {
  udp_fields.gridsquare = o->value();
}

Fl_Check_Button *btn_udp_State=(Fl_Check_Button *)0;

static void cb_btn_udp_State(Fl_Check_Button* o, void*) {
  udp_fields.state = o->value();
}

Fl_Check_Button *btn_udp_Age=(Fl_Check_Button *)0;

static void cb_btn_udp_Age(Fl_Check_Button* o, void*) {
  udp_fields.age = o->value();
}

Fl_Check_Button *btn_udp_StaCall=(Fl_Check_Button *)0;

static void cb_btn_udp_StaCall(Fl_Check_Button* o, void*) {
  udp_fields.sta_call = o->value();
}

Fl_Check_Button *btn_udp_StaCity=(Fl_Check_Button *)0;

static void cb_btn_udp_StaCity(Fl_Check_Button* o, void*) {
  udp_fields.mycity = o->value();
}

Fl_Check_Button *btn_udp_StaGrid=(Fl_Check_Button *)0;

static void cb_btn_udp_StaGrid(Fl_Check_Button* o, void*) {
  udp_fields.mygrid = o->value();
}

Fl_Check_Button *btn_udp_Operator=(Fl_Check_Button *)0;

static void cb_btn_udp_Operator(Fl_Check_Button* o, void*) {
  udp_fields.op_call = o->value();
}

Fl_Check_Button *btn_udp_Province=(Fl_Check_Button *)0;

static void cb_btn_udp_Province(Fl_Check_Button* o, void*) {
  udp_fields.province = o->value();
}

Fl_Check_Button *btn_udp_Country=(Fl_Check_Button *)0;

static void cb_btn_udp_Country(Fl_Check_Button* o, void*) {
  udp_fields.country = o->value();
}

Fl_Check_Button *btn_udp_Notes=(Fl_Check_Button *)0;

static void cb_btn_udp_Notes(Fl_Check_Button* o, void*) {
  udp_fields.notes = o->value();
}

Fl_Check_Button *btn_udp_QSLrcvd=(Fl_Check_Button *)0;

static void cb_btn_udp_QSLrcvd(Fl_Check_Button* o, void*) {
  udp_fields.qsl_rcvd = o->value();
}

Fl_Check_Button *btn_udp_QSLsent=(Fl_Check_Button *)0;

static void cb_btn_udp_QSLsent(Fl_Check_Button* o, void*) {
  udp_fields.qsl_sent = o->value();
}

Fl_Check_Button *btn_udp_eQSLrcvd=(Fl_Check_Button *)0;

static void cb_btn_udp_eQSLrcvd(Fl_Check_Button* o, void*) {
  udp_fields.eqsl_rcvd = o->value();
}

Fl_Check_Button *btn_udp_eQSLsent=(Fl_Check_Button *)0;

static void cb_btn_udp_eQSLsent(Fl_Check_Button* o, void*) {
  udp_fields.eqsl_sent = o->value();
}

Fl_Check_Button *btn_udp_LOTWrcvd=(Fl_Check_Button *)0;

static void cb_btn_udp_LOTWrcvd(Fl_Check_Button* o, void*) {
  udp_fields.lotw_rcvd = o->value();
}

Fl_Check_Button *btn_udp_LOTWsent=(Fl_Check_Button *)0;

static void cb_btn_udp_LOTWsent(Fl_Check_Button* o, void*) {
  udp_fields.lotw_sent = o->value();
}

Fl_Check_Button *btn_udp_QSL_VIA=(Fl_Check_Button *)0;

static void cb_btn_udp_QSL_VIA(Fl_Check_Button* o, void*) {
  udp_fields.qsl_via = o->value();
}

Fl_Check_Button *btn_udp_SerialIN=(Fl_Check_Button *)0;

static void cb_btn_udp_SerialIN(Fl_Check_Button* o, void*) {
  udp_fields.srx = o->value();
}

Fl_Check_Button *btn_udp_SerialOUT=(Fl_Check_Button *)0;

static void cb_btn_udp_SerialOUT(Fl_Check_Button* o, void*) {
  udp_fields.stx = o->value();
}

Fl_Check_Button *btn_udp_Check=(Fl_Check_Button *)0;

static void cb_btn_udp_Check(Fl_Check_Button* o, void*) {
  udp_fields.check = o->value();
}

Fl_Check_Button *btn_udp_XchgIn=(Fl_Check_Button *)0;

static void cb_btn_udp_XchgIn(Fl_Check_Button* o, void*) {
  udp_fields.xchg1 = o->value();
}

Fl_Check_Button *btn_udp_MyXchg=(Fl_Check_Button *)0;

static void cb_btn_udp_MyXchg(Fl_Check_Button* o, void*) {
  udp_fields.myxchg = o->value();
}

Fl_Check_Button *btn_udp_CNTY=(Fl_Check_Button *)0;

static void cb_btn_udp_CNTY(Fl_Check_Button* o, void*) {
  udp_fields.county = o->value();
}

Fl_Check_Button *btn_udp_CONT=(Fl_Check_Button *)0;

static void cb_btn_udp_CONT(Fl_Check_Button* o, void*) {
  udp_fields.continent = o->value();
}

Fl_Check_Button *btn_udp_CQZ=(Fl_Check_Button *)0;

static void cb_btn_udp_CQZ(Fl_Check_Button* o, void*) {
  udp_fields.cqz = o->value();
}

Fl_Check_Button *btn_udp_DXCC=(Fl_Check_Button *)0;

static void cb_btn_udp_DXCC(Fl_Check_Button* o, void*) {
  udp_fields.dxcc = o->value();
}

Fl_Check_Button *btn_udp_IOTA=(Fl_Check_Button *)0;

static void cb_btn_udp_IOTA(Fl_Check_Button* o, void*) {
  udp_fields.iota = o->value();
}

Fl_Check_Button *btn_udp_ITUZ=(Fl_Check_Button *)0;

static void cb_btn_udp_ITUZ(Fl_Check_Button* o, void*) {
  udp_fields.ituz = o->value();
}

Fl_Check_Button *btn_udp_Class=(Fl_Check_Button *)0;

static void cb_btn_udp_Class(Fl_Check_Button* o, void*) {
  udp_fields.arrl_class = o->value();
}

Fl_Check_Button *btn_udp_Section=(Fl_Check_Button *)0;

static void cb_btn_udp_Section(Fl_Check_Button* o, void*) {
  udp_fields.arrl_sect = o->value();
}

Fl_Check_Button *btn_udp_cwss_serno=(Fl_Check_Button *)0;

static void cb_btn_udp_cwss_serno(Fl_Check_Button* o, void*) {
  udp_fields.cwss_serno = o->value();
}

Fl_Check_Button *btn_udp_cwss_prec=(Fl_Check_Button *)0;

static void cb_btn_udp_cwss_prec(Fl_Check_Button* o, void*) {
  udp_fields.cwss_prec = o->value();
}

Fl_Check_Button *btn_udp_cwss_check=(Fl_Check_Button *)0;

static void cb_btn_udp_cwss_check(Fl_Check_Button* o, void*) {
  udp_fields.cwss_check = o->value();
}

Fl_Check_Button *btn_udp_cwss_section=(Fl_Check_Button *)0;

static void cb_btn_udp_cwss_section(Fl_Check_Button* o, void*) {
  udp_fields.cwss_section = o->value();
}

Fl_Check_Button *btn_udp_1010=(Fl_Check_Button *)0;

static void cb_btn_udp_1010(Fl_Check_Button* o, void*) {
  udp_fields.ten_ten = o->value();
}

Fl_Button *btnUDPClearAllFields=(Fl_Button *)0;

static void cb_btnUDPClearAllFields(Fl_Button*, void*) {
  btn_udp_Call->value(0);
btn_udp_Name->value(0);
btn_udp_Freq->value(0);
btn_udp_Band->value(0);
btn_udp_Mode->value(0);
btn_udp_QSOdateOn->value(0);
btn_udp_QSOdateOff->value(0);
btn_udp_TimeON->value(0);
btn_udp_TimeOFF->value(0);
btn_udp_TX_pwr->value(0);
btn_udp_RSTsent->value(0);
btn_udp_RSTrcvd->value(0);
btn_udp_Qth->value(0);
btn_udp_LOC->value(0);
btn_udp_State->value(0);
btn_udp_Age->value(0);

btn_udp_StaCall->value(0);
btn_udp_StaGrid->value(0);
btn_udp_StaCity->value(0);
btn_udp_Operator->value(0);
btn_udp_Province->value(0);
btn_udp_Country->value(0);
btn_udp_Notes->value(0);
btn_udp_QSLrcvd->value(0);
btn_udp_QSLsent->value(0);
btn_udp_eQSLrcvd->value(0);
btn_udp_eQSLsent->value(0);
btn_udp_LOTWrcvd->value(0);
btn_udp_LOTWsent->value(0);
btn_udp_QSL_VIA->value(0);
btn_udp_SerialIN->value(0);
btn_udp_SerialOUT->value(0);

btn_udp_Check->value(0);
btn_udp_XchgIn->value(0);
btn_udp_MyXchg->value(0);
btn_udp_CNTY->value(0);
btn_udp_CONT->value(0);
btn_udp_CQZ->value(0);
btn_udp_DXCC->value(0);
btn_udp_IOTA->value(0);
btn_udp_ITUZ->value(0);
btn_udp_Class->value(0);
btn_udp_Section->value(0);
btn_udp_cwss_serno->value(0);
btn_udp_cwss_prec->value(0);
btn_udp_cwss_section->value(0);
btn_udp_cwss_check->value(0);
btn_udp_1010->value(0);
}

Fl_Button *btnUDPCheckAllFields=(Fl_Button *)0;

static void cb_btnUDPCheckAllFields(Fl_Button*, void*) {
  btn_udp_Call->value(1);
btn_udp_Name->value(1);
btn_udp_Freq->value(1);
btn_udp_Band->value(1);
btn_udp_Mode->value(1);
btn_udp_QSOdateOn->value(1);
btn_udp_QSOdateOff->value(1);
btn_udp_TimeON->value(1);
btn_udp_TimeOFF->value(1);
btn_udp_TX_pwr->value(1);
btn_udp_RSTsent->value(1);
btn_udp_RSTrcvd->value(1);
btn_udp_Qth->value(1);
btn_udp_LOC->value(1);
btn_udp_State->value(1);
btn_udp_Age->value(1);

btn_udp_StaCall->value(1);
btn_udp_StaGrid->value(1);
btn_udp_StaCity->value(1);
btn_udp_Operator->value(1);
btn_udp_Province->value(1);
btn_udp_Country->value(1);
btn_udp_Notes->value(1);
btn_udp_QSLrcvd->value(1);
btn_udp_QSLsent->value(1);
btn_udp_eQSLrcvd->value(1);
btn_udp_eQSLsent->value(1);
btn_udp_LOTWrcvd->value(1);
btn_udp_LOTWsent->value(1);
btn_udp_QSL_VIA->value(1);
btn_udp_SerialIN->value(1);
btn_udp_SerialOUT->value(1);

btn_udp_Check->value(1);
btn_udp_XchgIn->value(1);
btn_udp_MyXchg->value(1);
btn_udp_CNTY->value(1);
btn_udp_CONT->value(1);
btn_udp_CQZ->value(1);
btn_udp_DXCC->value(1);
btn_udp_IOTA->value(1);
btn_udp_ITUZ->value(1);
btn_udp_Class->value(1);
btn_udp_Section->value(1);
btn_udp_cwss_serno->value(1);
btn_udp_cwss_prec->value(1);
btn_udp_cwss_check->value(1);
btn_udp_cwss_section->value(1);
btn_udp_1010->value(1);
}

Fl_Return_Button *btnUDPOK=(Fl_Return_Button *)0;

static void cb_btnUDPOK(Fl_Return_Button*, void*) {
  save_udp_prefs();
wUDPfields->hide();
}

Fl_Button *btnUDPcancel=(Fl_Button *)0;

static void cb_btnUDPcancel(Fl_Button*, void*) {
  wUDPfields->hide();
}

Fl_Double_Window *wCLDfields=(Fl_Double_Window *)0;

Fl_Check_Button *btn_cloud_Call=(Fl_Check_Button *)0;

static void cb_btn_cloud_Call(Fl_Check_Button* o, void*) {
  cloud_fields.call = o->value();
}

Fl_Check_Button *btn_cloud_Name=(Fl_Check_Button *)0;

static void cb_btn_cloud_Name(Fl_Check_Button* o, void*) {
  cloud_fields.name = o->value();
}

Fl_Check_Button *btn_cloud_Freq=(Fl_Check_Button *)0;

static void cb_btn_cloud_Freq(Fl_Check_Button* o, void*) {
  cloud_fields.freq = o->value();
}

Fl_Check_Button *btn_cloud_Band=(Fl_Check_Button *)0;

static void cb_btn_cloud_Band(Fl_Check_Button* o, void*) {
  cloud_fields.band = o->value();
}

Fl_Check_Button *btn_cloud_Mode=(Fl_Check_Button *)0;

static void cb_btn_cloud_Mode(Fl_Check_Button* o, void*) {
  cloud_fields.mode = o->value();
}

Fl_Check_Button *btn_cloud_QSOdateOn=(Fl_Check_Button *)0;

static void cb_btn_cloud_QSOdateOn(Fl_Check_Button* o, void*) {
  cloud_fields.date_on = o->value();
}

Fl_Check_Button *btn_cloud_QSOdateOff=(Fl_Check_Button *)0;

static void cb_btn_cloud_QSOdateOff(Fl_Check_Button* o, void*) {
  cloud_fields.date_off = o->value();
}

Fl_Check_Button *btn_cloud_TimeON=(Fl_Check_Button *)0;

static void cb_btn_cloud_TimeON(Fl_Check_Button* o, void*) {
  cloud_fields.time_on = o->value();
}

Fl_Check_Button *btn_cloud_TimeOFF=(Fl_Check_Button *)0;

static void cb_btn_cloud_TimeOFF(Fl_Check_Button* o, void*) {
  cloud_fields.time_off = o->value();
}

Fl_Check_Button *btn_cloud_TX_pwr=(Fl_Check_Button *)0;

static void cb_btn_cloud_TX_pwr(Fl_Check_Button* o, void*) {
  cloud_fields.tx_pwr = o->value();
}

Fl_Check_Button *btn_cloud_RSTsent=(Fl_Check_Button *)0;

static void cb_btn_cloud_RSTsent(Fl_Check_Button* o, void*) {
  cloud_fields.rst_sent = o->value();
}

Fl_Check_Button *btn_cloud_RSTrcvd=(Fl_Check_Button *)0;

static void cb_btn_cloud_RSTrcvd(Fl_Check_Button* o, void*) {
  cloud_fields.rst_rcvd = o->value();
}

Fl_Check_Button *btn_cloud_Qth=(Fl_Check_Button *)0;

static void cb_btn_cloud_Qth(Fl_Check_Button* o, void*) {
  cloud_fields.qth = o->value();
}

Fl_Check_Button *btn_cloud_LOC=(Fl_Check_Button *)0;

static void cb_btn_cloud_LOC(Fl_Check_Button* o, void*) {
  cloud_fields.gridsquare = o->value();
}

Fl_Check_Button *btn_cloud_State=(Fl_Check_Button *)0;

static void cb_btn_cloud_State(Fl_Check_Button* o, void*) {
  cloud_fields.state = o->value();
}

Fl_Check_Button *btn_cloud_Age=(Fl_Check_Button *)0;

static void cb_btn_cloud_Age(Fl_Check_Button* o, void*) {
  cloud_fields.age = o->value();
}

Fl_Check_Button *btn_cloud_StaCall=(Fl_Check_Button *)0;

static void cb_btn_cloud_StaCall(Fl_Check_Button* o, void*) {
  cloud_fields.sta_call = o->value();
}

Fl_Check_Button *btn_cloud_StaCity=(Fl_Check_Button *)0;

static void cb_btn_cloud_StaCity(Fl_Check_Button* o, void*) {
  cloud_fields.mycity = o->value();
}

Fl_Check_Button *btn_cloud_StaGrid=(Fl_Check_Button *)0;

static void cb_btn_cloud_StaGrid(Fl_Check_Button* o, void*) {
  cloud_fields.mygrid = o->value();
}

Fl_Check_Button *btn_cloud_Operator=(Fl_Check_Button *)0;

static void cb_btn_cloud_Operator(Fl_Check_Button* o, void*) {
  cloud_fields.op_call = o->value();
}

Fl_Check_Button *btn_cloud_Province=(Fl_Check_Button *)0;

static void cb_btn_cloud_Province(Fl_Check_Button* o, void*) {
  cloud_fields.province = o->value();
}

Fl_Check_Button *btn_cloud_Country=(Fl_Check_Button *)0;

static void cb_btn_cloud_Country(Fl_Check_Button* o, void*) {
  cloud_fields.country = o->value();
}

Fl_Check_Button *btn_cloud_Notes=(Fl_Check_Button *)0;

static void cb_btn_cloud_Notes(Fl_Check_Button* o, void*) {
  cloud_fields.notes = o->value();
}

Fl_Check_Button *btn_cloud_QSLrcvd=(Fl_Check_Button *)0;

static void cb_btn_cloud_QSLrcvd(Fl_Check_Button* o, void*) {
  cloud_fields.qsl_rcvd = o->value();
}

Fl_Check_Button *btn_cloud_QSLsent=(Fl_Check_Button *)0;

static void cb_btn_cloud_QSLsent(Fl_Check_Button* o, void*) {
  cloud_fields.qsl_sent = o->value();
}

Fl_Check_Button *btn_cloud_eQSLrcvd=(Fl_Check_Button *)0;

static void cb_btn_cloud_eQSLrcvd(Fl_Check_Button* o, void*) {
  cloud_fields.eqsl_rcvd = o->value();
}

Fl_Check_Button *btn_cloud_eQSLsent=(Fl_Check_Button *)0;

static void cb_btn_cloud_eQSLsent(Fl_Check_Button* o, void*) {
  cloud_fields.eqsl_sent = o->value();
}

Fl_Check_Button *btn_cloud_LOTWrcvd=(Fl_Check_Button *)0;

static void cb_btn_cloud_LOTWrcvd(Fl_Check_Button* o, void*) {
  cloud_fields.lotw_rcvd = o->value();
}

Fl_Check_Button *btn_cloud_LOTWsent=(Fl_Check_Button *)0;

static void cb_btn_cloud_LOTWsent(Fl_Check_Button* o, void*) {
  cloud_fields.lotw_sent = o->value();
}

Fl_Check_Button *btn_cloud_QSL_VIA=(Fl_Check_Button *)0;

static void cb_btn_cloud_QSL_VIA(Fl_Check_Button* o, void*) {
  cloud_fields.qsl_via = o->value();
}

Fl_Check_Button *btn_cloud_SerialIN=(Fl_Check_Button *)0;

static void cb_btn_cloud_SerialIN(Fl_Check_Button* o, void*) {
  cloud_fields.srx = o->value();
}

Fl_Check_Button *btn_cloud_SerialOUT=(Fl_Check_Button *)0;

static void cb_btn_cloud_SerialOUT(Fl_Check_Button* o, void*) {
  cloud_fields.stx = o->value();
}

Fl_Check_Button *btn_cloud_Check=(Fl_Check_Button *)0;

static void cb_btn_cloud_Check(Fl_Check_Button* o, void*) {
  cloud_fields.check = o->value();
}

Fl_Check_Button *btn_cloud_XchgIn=(Fl_Check_Button *)0;

static void cb_btn_cloud_XchgIn(Fl_Check_Button* o, void*) {
  cloud_fields.xchg1 = o->value();
}

Fl_Check_Button *btn_cloud_MyXchg=(Fl_Check_Button *)0;

static void cb_btn_cloud_MyXchg(Fl_Check_Button* o, void*) {
  cloud_fields.myxchg = o->value();
}

Fl_Check_Button *btn_cloud_CNTY=(Fl_Check_Button *)0;

static void cb_btn_cloud_CNTY(Fl_Check_Button* o, void*) {
  cloud_fields.county = o->value();
}

Fl_Check_Button *btn_cloud_CONT=(Fl_Check_Button *)0;

static void cb_btn_cloud_CONT(Fl_Check_Button* o, void*) {
  cloud_fields.continent = o->value();
}

Fl_Check_Button *btn_cloud_CQZ=(Fl_Check_Button *)0;

static void cb_btn_cloud_CQZ(Fl_Check_Button* o, void*) {
  cloud_fields.cqz = o->value();
}

Fl_Check_Button *btn_cloud_DXCC=(Fl_Check_Button *)0;

static void cb_btn_cloud_DXCC(Fl_Check_Button* o, void*) {
  cloud_fields.dxcc = o->value();
}

Fl_Check_Button *btn_cloud_IOTA=(Fl_Check_Button *)0;

static void cb_btn_cloud_IOTA(Fl_Check_Button* o, void*) {
  cloud_fields.iota = o->value();
}

Fl_Check_Button *btn_cloud_ITUZ=(Fl_Check_Button *)0;

static void cb_btn_cloud_ITUZ(Fl_Check_Button* o, void*) {
  cloud_fields.ituz = o->value();
}

Fl_Check_Button *btn_cloud_Class=(Fl_Check_Button *)0;

static void cb_btn_cloud_Class(Fl_Check_Button* o, void*) {
  cloud_fields.arrl_class = o->value();
}

Fl_Check_Button *btn_cloud_Section=(Fl_Check_Button *)0;

static void cb_btn_cloud_Section(Fl_Check_Button* o, void*) {
  cloud_fields.arrl_sect = o->value();
}

Fl_Check_Button *btn_cloud_cwss_serno=(Fl_Check_Button *)0;

static void cb_btn_cloud_cwss_serno(Fl_Check_Button* o, void*) {
  cloud_fields.cwss_serno = o->value();
}

Fl_Check_Button *btn_cloud_cwss_prec=(Fl_Check_Button *)0;

static void cb_btn_cloud_cwss_prec(Fl_Check_Button* o, void*) {
  cloud_fields.cwss_prec = o->value();
}

Fl_Check_Button *btn_cloud_cwss_check=(Fl_Check_Button *)0;

static void cb_btn_cloud_cwss_check(Fl_Check_Button* o, void*) {
  cloud_fields.cwss_check = o->value();
}

Fl_Check_Button *btn_cloud_cwss_section=(Fl_Check_Button *)0;

static void cb_btn_cloud_cwss_section(Fl_Check_Button* o, void*) {
  cloud_fields.cwss_section = o->value();
}

Fl_Check_Button *btn_cloud_1010=(Fl_Check_Button *)0;

static void cb_btn_cloud_1010(Fl_Check_Button* o, void*) {
  cloud_fields.ten_ten = o->value();
}

Fl_Button *btnCLDClearAllFields=(Fl_Button *)0;

static void cb_btnCLDClearAllFields(Fl_Button*, void*) {
  btn_cloud_Call->value(0);
btn_cloud_Name->value(0);
btn_cloud_Freq->value(0);
btn_cloud_Band->value(0);
btn_cloud_Mode->value(0);
btn_cloud_QSOdateOn->value(0);
btn_cloud_QSOdateOff->value(0);
btn_cloud_TimeON->value(0);
btn_cloud_TimeOFF->value(0);
btn_cloud_TX_pwr->value(0);
btn_cloud_RSTsent->value(0);
btn_cloud_RSTrcvd->value(0);
btn_cloud_Qth->value(0);
btn_cloud_LOC->value(0);
btn_cloud_State->value(0);
btn_cloud_Age->value(0);

btn_cloud_StaCall->value(0);
btn_cloud_StaGrid->value(0);
btn_cloud_StaCity->value(0);
btn_cloud_Operator->value(0);
btn_cloud_Province->value(0);
btn_cloud_Country->value(0);
btn_cloud_Notes->value(0);
btn_cloud_QSLrcvd->value(0);
btn_cloud_QSLsent->value(0);
btn_cloud_eQSLrcvd->value(0);
btn_cloud_eQSLsent->value(0);
btn_cloud_LOTWrcvd->value(0);
btn_cloud_LOTWsent->value(0);
btn_cloud_QSL_VIA->value(0);
btn_cloud_SerialIN->value(0);
btn_cloud_SerialOUT->value(0);

btn_cloud_Check->value(0);
btn_cloud_XchgIn->value(0);
btn_cloud_MyXchg->value(0);
btn_cloud_CNTY->value(0);
btn_cloud_CONT->value(0);
btn_cloud_CQZ->value(0);
btn_cloud_DXCC->value(0);
btn_cloud_IOTA->value(0);
btn_cloud_ITUZ->value(0);
btn_cloud_Class->value(0);
btn_cloud_Section->value(0);
btn_cloud_cwss_serno->value(0);
btn_cloud_cwss_prec->value(0);
btn_cloud_cwss_section->value(0);
btn_cloud_cwss_check->value(0);
btn_cloud_1010->value(0);
}

Fl_Button *btnCLDCheckAllFields=(Fl_Button *)0;

static void cb_btnCLDCheckAllFields(Fl_Button*, void*) {
  btn_cloud_Call->value(1);
btn_cloud_Name->value(1);
btn_cloud_Freq->value(1);
btn_cloud_Band->value(1);
btn_cloud_Mode->value(1);
btn_cloud_QSOdateOn->value(1);
btn_cloud_QSOdateOff->value(1);
btn_cloud_TimeON->value(1);
btn_cloud_TimeOFF->value(1);
btn_cloud_TX_pwr->value(1);
btn_cloud_RSTsent->value(1);
btn_cloud_RSTrcvd->value(1);
btn_cloud_Qth->value(1);
btn_cloud_LOC->value(1);
btn_cloud_State->value(1);
btn_cloud_Age->value(1);

btn_cloud_StaCall->value(1);
btn_cloud_StaGrid->value(1);
btn_cloud_StaCity->value(1);
btn_cloud_Operator->value(1);
btn_cloud_Province->value(1);
btn_cloud_Country->value(1);
btn_cloud_Notes->value(1);
btn_cloud_QSLrcvd->value(1);
btn_cloud_QSLsent->value(1);
btn_cloud_eQSLrcvd->value(1);
btn_cloud_eQSLsent->value(1);
btn_cloud_LOTWrcvd->value(1);
btn_cloud_LOTWsent->value(1);
btn_cloud_QSL_VIA->value(1);
btn_cloud_SerialIN->value(1);
btn_cloud_SerialOUT->value(1);

btn_cloud_Check->value(1);
btn_cloud_XchgIn->value(1);
btn_cloud_MyXchg->value(1);
btn_cloud_CNTY->value(1);
btn_cloud_CONT->value(1);
btn_cloud_CQZ->value(1);
btn_cloud_DXCC->value(1);
btn_cloud_IOTA->value(1);
btn_cloud_ITUZ->value(1);
btn_cloud_Class->value(1);
btn_cloud_Section->value(1);
btn_cloud_cwss_serno->value(1);
btn_cloud_cwss_prec->value(1);
btn_cloud_cwss_check->value(1);
btn_cloud_cwss_section->value(1);
btn_cloud_1010->value(1);
}

Fl_Return_Button *btnCLDOK=(Fl_Return_Button *)0;

static void cb_btnCLDOK(Fl_Return_Button*, void*) {
  save_cloud_prefs();
wCLDfields->hide();
}

Fl_Button *btnCLDcancel=(Fl_Button *)0;

static void cb_btnCLDcancel(Fl_Button*, void*) {
  wCLDfields->hide();
}

void create_logbook_dialogs() {
  { wExport = new Fl_Double_Window(805, 440, _("Export Setup"));
    { Fl_Group* o = new Fl_Group(4, 4, 388, 430, _("Select Records to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { chkExportBrowser = new Fl_Check_Browser(13, 25, 370, 330);
      } // Fl_Check_Browser* chkExportBrowser
      { btnClearAll = new Fl_Button(78, 362, 90, 20, _("Clear All"));
        btnClearAll->callback((Fl_Callback*)cb_btnClearAll);
      } // Fl_Button* btnClearAll
      { btnCheckAll = new Fl_Button(201, 362, 90, 20, _("Check All"));
        btnCheckAll->callback((Fl_Callback*)cb_btnCheckAll);
      } // Fl_Button* btnCheckAll
      { inp_export_start_date = new Fl_DateInput(20, 402, 100, 22, _("Start Date"));
        inp_export_start_date->tooltip(_("Start date for export"));
        inp_export_start_date->box(FL_DOWN_BOX);
        inp_export_start_date->color(FL_BACKGROUND2_COLOR);
        inp_export_start_date->selection_color(FL_SELECTION_COLOR);
        inp_export_start_date->labeltype(FL_NORMAL_LABEL);
        inp_export_start_date->labelfont(0);
        inp_export_start_date->labelsize(14);
        inp_export_start_date->labelcolor(FL_FOREGROUND_COLOR);
        inp_export_start_date->callback((Fl_Callback*)cb_inp_export_start_date);
        inp_export_start_date->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_export_start_date->when(FL_WHEN_RELEASE);
        inp_export_start_date->format(2);
      } // Fl_DateInput* inp_export_start_date
      { inp_export_stop_date = new Fl_DateInput(144, 402, 100, 22, _("Stop Date"));
        inp_export_stop_date->tooltip(_("Inclusive stop date for export"));
        inp_export_stop_date->box(FL_DOWN_BOX);
        inp_export_stop_date->color(FL_BACKGROUND2_COLOR);
        inp_export_stop_date->selection_color(FL_SELECTION_COLOR);
        inp_export_stop_date->labeltype(FL_NORMAL_LABEL);
        inp_export_stop_date->labelfont(0);
        inp_export_stop_date->labelsize(14);
        inp_export_stop_date->labelcolor(FL_FOREGROUND_COLOR);
        inp_export_stop_date->callback((Fl_Callback*)cb_inp_export_stop_date);
        inp_export_stop_date->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_export_stop_date->when(FL_WHEN_RELEASE);
        inp_export_stop_date->format(2);
      } // Fl_DateInput* inp_export_stop_date
      { btn_export_by_date = new Fl_Check_Button(269, 405, 70, 15, _("select by date"));
        btn_export_by_date->tooltip(_("Enable to select date range"));
        btn_export_by_date->down_box(FL_DOWN_BOX);
        btn_export_by_date->callback((Fl_Callback*)cb_btn_export_by_date);
      } // Fl_Check_Button* btn_export_by_date
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(392, 4, 414, 430, _("Select Fields to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { btnSelectCall = new Fl_Check_Button(402, 26, 70, 15, _("Call"));
        btnSelectCall->down_box(FL_DOWN_BOX);
        btnSelectCall->value(1);
      } // Fl_Check_Button* btnSelectCall
      { btnSelectName = new Fl_Check_Button(402, 47, 70, 15, _("Name"));
        btnSelectName->down_box(FL_DOWN_BOX);
        btnSelectName->value(1);
      } // Fl_Check_Button* btnSelectName
      { btnSelectFreq = new Fl_Check_Button(402, 68, 70, 15, _("Freq"));
        btnSelectFreq->down_box(FL_DOWN_BOX);
        btnSelectFreq->value(1);
      } // Fl_Check_Button* btnSelectFreq
      { btnSelectBand = new Fl_Check_Button(402, 90, 70, 15, _("Band"));
        btnSelectBand->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectBand
      { btnSelectMode = new Fl_Check_Button(402, 111, 70, 15, _("Mode"));
        btnSelectMode->down_box(FL_DOWN_BOX);
        btnSelectMode->value(1);
      } // Fl_Check_Button* btnSelectMode
      { btnSelectQSOdateOn = new Fl_Check_Button(402, 133, 70, 15, _("QSO Date On"));
        btnSelectQSOdateOn->down_box(FL_DOWN_BOX);
        btnSelectQSOdateOn->value(1);
      } // Fl_Check_Button* btnSelectQSOdateOn
      { btnSelectQSOdateOff = new Fl_Check_Button(402, 154, 70, 15, _("QSO Date Off"));
        btnSelectQSOdateOff->down_box(FL_DOWN_BOX);
        btnSelectQSOdateOff->value(1);
      } // Fl_Check_Button* btnSelectQSOdateOff
      { btnSelectTimeON = new Fl_Check_Button(402, 176, 70, 15, _("Time ON"));
        btnSelectTimeON->down_box(FL_DOWN_BOX);
        btnSelectTimeON->value(1);
      } // Fl_Check_Button* btnSelectTimeON
      { btnSelectTimeOFF = new Fl_Check_Button(402, 197, 70, 15, _("Time OFF"));
        btnSelectTimeOFF->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectTimeOFF
      { btnSelectTX_pwr = new Fl_Check_Button(402, 219, 70, 15, _("TX Power"));
        btnSelectTX_pwr->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectTX_pwr
      { btnSelectRSTsent = new Fl_Check_Button(402, 240, 70, 15, _("RST sent"));
        btnSelectRSTsent->down_box(FL_DOWN_BOX);
        btnSelectRSTsent->value(1);
      } // Fl_Check_Button* btnSelectRSTsent
      { btnSelectRSTrcvd = new Fl_Check_Button(402, 262, 70, 15, _("RST rcvd"));
        btnSelectRSTrcvd->down_box(FL_DOWN_BOX);
        btnSelectRSTrcvd->value(1);
      } // Fl_Check_Button* btnSelectRSTrcvd
      { btnSelectQth = new Fl_Check_Button(402, 283, 70, 15, _("Qth"));
        btnSelectQth->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQth
      { btnSelectLOC = new Fl_Check_Button(402, 305, 70, 15, _("LOC"));
        btnSelectLOC->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectLOC
      { btnSelectState = new Fl_Check_Button(402, 326, 70, 15, _("State"));
        btnSelectState->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectState
      { btnSelectAge = new Fl_Check_Button(402, 348, 70, 15, _("Age"));
        btnSelectAge->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectAge
      { btnSelectStaCall = new Fl_Check_Button(536, 26, 70, 15, _("Station Call"));
        btnSelectStaCall->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectStaCall
      { btnSelectStaCity = new Fl_Check_Button(536, 47, 70, 15, _("Station QTH"));
        btnSelectStaCity->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectStaCity
      { btnSelectStaGrid = new Fl_Check_Button(536, 68, 70, 15, _("Station LOC"));
        btnSelectStaGrid->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectStaGrid
      { btnSelectOperator = new Fl_Check_Button(536, 90, 70, 15, _("Operator"));
        btnSelectOperator->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectOperator
      { btnSelectProvince = new Fl_Check_Button(536, 111, 70, 15, _("Province"));
        btnSelectProvince->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectProvince
      { btnSelectCountry = new Fl_Check_Button(536, 133, 70, 15, _("Country"));
        btnSelectCountry->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCountry
      { btnSelectNotes = new Fl_Check_Button(536, 154, 70, 15, _("Notes"));
        btnSelectNotes->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectNotes
      { btnSelectQSLrcvd = new Fl_Check_Button(536, 176, 70, 15, _("QSL rcvd date"));
        btnSelectQSLrcvd->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSLrcvd
      { btnSelectQSLsent = new Fl_Check_Button(536, 197, 70, 15, _("QSL sent date"));
        btnSelectQSLsent->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSLsent
      { btnSelecteQSLrcvd = new Fl_Check_Button(536, 219, 70, 15, _("eQSL rcvd date"));
        btnSelecteQSLrcvd->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelecteQSLrcvd
      { btnSelecteQSLsent = new Fl_Check_Button(536, 240, 70, 15, _("eQSL sent date"));
        btnSelecteQSLsent->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelecteQSLsent
      { btnSelectLOTWrcvd = new Fl_Check_Button(536, 262, 70, 15, _("LoTW rcvd date"));
        btnSelectLOTWrcvd->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectLOTWrcvd
      { btnSelectLOTWsent = new Fl_Check_Button(536, 283, 70, 15, _("LoTW sent date"));
        btnSelectLOTWsent->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectLOTWsent
      { btnSelectQSL_VIA = new Fl_Check_Button(536, 305, 70, 15, _("QSL-VIA"));
        btnSelectQSL_VIA->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSL_VIA
      { btnSelectSerialIN = new Fl_Check_Button(536, 326, 70, 15, _("Serial # in"));
        btnSelectSerialIN->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSerialIN
      { btnSelectSerialOUT = new Fl_Check_Button(536, 348, 70, 15, _("Serial # out"));
        btnSelectSerialOUT->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSerialOUT
      { btnSelectCheck = new Fl_Check_Button(670, 26, 70, 15, _("Check"));
        btnSelectCheck->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCheck
      { btnSelectXchgIn = new Fl_Check_Button(670, 47, 70, 15, _("Exchange In"));
        btnSelectXchgIn->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectXchgIn
      { btnSelectMyXchg = new Fl_Check_Button(670, 68, 70, 15, _("Exchange Out"));
        btnSelectMyXchg->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectMyXchg
      { btnSelectCNTY = new Fl_Check_Button(670, 90, 70, 15, _("County"));
        btnSelectCNTY->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCNTY
      { btnSelectCONT = new Fl_Check_Button(670, 111, 70, 15, _("Continent"));
        btnSelectCONT->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCONT
      { btnSelectCQZ = new Fl_Check_Button(670, 133, 70, 15, _("CQZ"));
        btnSelectCQZ->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCQZ
      { btnSelectDXCC = new Fl_Check_Button(670, 154, 70, 15, _("DXCC"));
        btnSelectDXCC->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectDXCC
      { btnSelectIOTA = new Fl_Check_Button(670, 176, 70, 15, _("IOTA"));
        btnSelectIOTA->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectIOTA
      { btnSelectITUZ = new Fl_Check_Button(670, 197, 70, 15, _("ITUZ"));
        btnSelectITUZ->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectITUZ
      { btnSelectClass = new Fl_Check_Button(670, 219, 70, 15, _("FD class"));
        btnSelectClass->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectClass
      { btnSelectSection = new Fl_Check_Button(670, 240, 70, 15, _("FD section"));
        btnSelectSection->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSection
      { btnSelect_cwss_serno = new Fl_Check_Button(670, 262, 70, 15, _("CW SS SerNo R"));
        btnSelect_cwss_serno->tooltip(_("CW sweepstakes rcvd ser. no."));
        btnSelect_cwss_serno->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelect_cwss_serno
      { btnSelect_cwss_prec = new Fl_Check_Button(670, 283, 70, 15, _("CW SS Prec\'"));
        btnSelect_cwss_prec->tooltip(_("CW sweepstakes precedence"));
        btnSelect_cwss_prec->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelect_cwss_prec
      { btnSelect_cwss_check = new Fl_Check_Button(670, 305, 70, 15, _("CW SS Check"));
        btnSelect_cwss_check->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelect_cwss_check
      { btnSelect_cwss_section = new Fl_Check_Button(670, 326, 70, 15, _("CW SS Section"));
        btnSelect_cwss_section->tooltip(_("CW sweepstakes section"));
        btnSelect_cwss_section->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelect_cwss_section
      { btnSelect_1010 = new Fl_Check_Button(670, 348, 70, 15, _("10-10"));
        btnSelect_1010->tooltip(_("CW sweepstakes section"));
        btnSelect_1010->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelect_1010
      { btnClearAllFields = new Fl_Button(412, 373, 85, 20, _("Clear All"));
        btnClearAllFields->callback((Fl_Callback*)cb_btnClearAllFields);
      } // Fl_Button* btnClearAllFields
      { btnCheckAllFields = new Fl_Button(507, 373, 85, 20, _("Check All"));
        btnCheckAllFields->callback((Fl_Callback*)cb_btnCheckAllFields);
      } // Fl_Button* btnCheckAllFields
      { btnSetFieldDefaults = new Fl_Button(602, 373, 85, 20, _("Defaults"));
        btnSetFieldDefaults->callback((Fl_Callback*)cb_btnSetFieldDefaults);
      } // Fl_Button* btnSetFieldDefaults
      { btnSetLoTWfields = new Fl_Button(697, 373, 85, 20, _("LoTW"));
        btnSetLoTWfields->callback((Fl_Callback*)cb_btnSetLoTWfields);
      } // Fl_Button* btnSetLoTWfields
      { btnOK = new Fl_Return_Button(697, 403, 85, 20, _("OK"));
        btnOK->callback((Fl_Callback*)cb_btnOK);
      } // Fl_Return_Button* btnOK
      { btnCancel = new Fl_Button(602, 403, 85, 20, _("Cancel"));
        btnCancel->callback((Fl_Callback*)cb_btnCancel);
      } // Fl_Button* btnCancel
      o->end();
    } // Fl_Group* o
    wExport->end();
  } // Fl_Double_Window* wExport
  { Fl_Double_Window* o = dlgLogbook = new Fl_Double_Window(590, 390, _("Logbook"));
    { inpDate_log = new Fl_DateInput(4, 24, 100, 24, _("Date On"));
      inpDate_log->tooltip(_("Date QSO started"));
      inpDate_log->box(FL_DOWN_BOX);
      inpDate_log->color(FL_BACKGROUND2_COLOR);
      inpDate_log->selection_color(FL_SELECTION_COLOR);
      inpDate_log->labeltype(FL_NORMAL_LABEL);
      inpDate_log->labelfont(0);
      inpDate_log->labelsize(14);
      inpDate_log->labelcolor(FL_FOREGROUND_COLOR);
      inpDate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpDate_log->when(FL_WHEN_RELEASE);
      inpDate_log->format(2);
    } // Fl_DateInput* inpDate_log
    { inpTimeOn_log = new Fl_Input2(106, 24, 70, 24, _("Time On"));
      inpTimeOn_log->tooltip(_("Time QSO started"));
      inpTimeOn_log->box(FL_DOWN_BOX);
      inpTimeOn_log->color(FL_BACKGROUND2_COLOR);
      inpTimeOn_log->selection_color(FL_SELECTION_COLOR);
      inpTimeOn_log->labeltype(FL_NORMAL_LABEL);
      inpTimeOn_log->labelfont(0);
      inpTimeOn_log->labelsize(14);
      inpTimeOn_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTimeOn_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTimeOn_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTimeOn_log
    { inpCall_log = new Fl_Input2(178, 24, 100, 24, _("Call"));
      inpCall_log->tooltip(_("Call sign worked"));
      inpCall_log->box(FL_DOWN_BOX);
      inpCall_log->color(FL_BACKGROUND2_COLOR);
      inpCall_log->selection_color(FL_SELECTION_COLOR);
      inpCall_log->labeltype(FL_NORMAL_LABEL);
      inpCall_log->labelfont(0);
      inpCall_log->labelsize(14);
      inpCall_log->labelcolor(FL_FOREGROUND_COLOR);
      inpCall_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpCall_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpCall_log
    { inpName_log = new Fl_Input2(280, 24, 185, 24, _("Name"));
      inpName_log->tooltip(_("Operator worked"));
      inpName_log->box(FL_DOWN_BOX);
      inpName_log->color(FL_BACKGROUND2_COLOR);
      inpName_log->selection_color(FL_SELECTION_COLOR);
      inpName_log->labeltype(FL_NORMAL_LABEL);
      inpName_log->labelfont(0);
      inpName_log->labelsize(14);
      inpName_log->labelcolor(FL_FOREGROUND_COLOR);
      inpName_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpName_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpName_log
    { inpRstR_log = new Fl_Input2(468, 24, 36, 24, _("In"));
      inpRstR_log->tooltip(_("Rst received"));
      inpRstR_log->box(FL_DOWN_BOX);
      inpRstR_log->color(FL_BACKGROUND2_COLOR);
      inpRstR_log->selection_color(FL_SELECTION_COLOR);
      inpRstR_log->labeltype(FL_NORMAL_LABEL);
      inpRstR_log->labelfont(0);
      inpRstR_log->labelsize(14);
      inpRstR_log->labelcolor(FL_FOREGROUND_COLOR);
      inpRstR_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpRstR_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpRstR_log
    { txtNbrRecs_log = new Fl_Input2(520, 24, 65, 24, _("Recs"));
      txtNbrRecs_log->tooltip(_("# Records in logbook"));
      txtNbrRecs_log->box(FL_DOWN_BOX);
      txtNbrRecs_log->color(FL_BACKGROUND2_COLOR);
      txtNbrRecs_log->selection_color(FL_SELECTION_COLOR);
      txtNbrRecs_log->labeltype(FL_NORMAL_LABEL);
      txtNbrRecs_log->labelfont(0);
      txtNbrRecs_log->labelsize(14);
      txtNbrRecs_log->labelcolor(FL_FOREGROUND_COLOR);
      txtNbrRecs_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      txtNbrRecs_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txtNbrRecs_log
    { inpDateOff_log = new Fl_DateInput(4, 68, 100, 24, _("Date Off"));
      inpDateOff_log->tooltip(_("Date QSO Ended"));
      inpDateOff_log->box(FL_DOWN_BOX);
      inpDateOff_log->color(FL_BACKGROUND2_COLOR);
      inpDateOff_log->selection_color(FL_SELECTION_COLOR);
      inpDateOff_log->labeltype(FL_NORMAL_LABEL);
      inpDateOff_log->labelfont(0);
      inpDateOff_log->labelsize(14);
      inpDateOff_log->labelcolor(FL_FOREGROUND_COLOR);
      inpDateOff_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpDateOff_log->when(FL_WHEN_RELEASE);
      inpDateOff_log->format(2);
    } // Fl_DateInput* inpDateOff_log
    { inpTimeOff_log = new Fl_Input2(106, 68, 70, 24, _("Time Off"));
      inpTimeOff_log->tooltip(_("Time QSO ended"));
      inpTimeOff_log->box(FL_DOWN_BOX);
      inpTimeOff_log->color(FL_BACKGROUND2_COLOR);
      inpTimeOff_log->selection_color(FL_SELECTION_COLOR);
      inpTimeOff_log->labeltype(FL_NORMAL_LABEL);
      inpTimeOff_log->labelfont(0);
      inpTimeOff_log->labelsize(14);
      inpTimeOff_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTimeOff_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTimeOff_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTimeOff_log
    { inpFreq_log = new Fl_Input2(178, 68, 100, 24, _("Freq."));
      inpFreq_log->tooltip(_("Frequency in MHz"));
      inpFreq_log->box(FL_DOWN_BOX);
      inpFreq_log->color(FL_BACKGROUND2_COLOR);
      inpFreq_log->selection_color(FL_SELECTION_COLOR);
      inpFreq_log->labeltype(FL_NORMAL_LABEL);
      inpFreq_log->labelfont(0);
      inpFreq_log->labelsize(14);
      inpFreq_log->labelcolor(FL_FOREGROUND_COLOR);
      inpFreq_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpFreq_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpFreq_log
    { inpMode_log = new Fl_Input2(280, 68, 146, 24, _("Mode"));
      inpMode_log->tooltip(_("Mode in use"));
      inpMode_log->box(FL_DOWN_BOX);
      inpMode_log->color(FL_BACKGROUND2_COLOR);
      inpMode_log->selection_color(FL_SELECTION_COLOR);
      inpMode_log->labeltype(FL_NORMAL_LABEL);
      inpMode_log->labelfont(0);
      inpMode_log->labelsize(14);
      inpMode_log->labelcolor(FL_FOREGROUND_COLOR);
      inpMode_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpMode_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpMode_log
    { inpTX_pwr_log = new Fl_Input2(429, 68, 36, 24, _("Pwr"));
      inpTX_pwr_log->tooltip(_("Transmit power used"));
      inpTX_pwr_log->box(FL_DOWN_BOX);
      inpTX_pwr_log->color(FL_BACKGROUND2_COLOR);
      inpTX_pwr_log->selection_color(FL_SELECTION_COLOR);
      inpTX_pwr_log->labeltype(FL_NORMAL_LABEL);
      inpTX_pwr_log->labelfont(0);
      inpTX_pwr_log->labelsize(14);
      inpTX_pwr_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTX_pwr_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTX_pwr_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTX_pwr_log
    { inpLoc_log = new Fl_Input2(508, 68, 76, 24, _("Loc"));
      inpLoc_log->tooltip(_("Stations grid square"));
      inpLoc_log->box(FL_DOWN_BOX);
      inpLoc_log->color(FL_BACKGROUND2_COLOR);
      inpLoc_log->selection_color(FL_SELECTION_COLOR);
      inpLoc_log->labeltype(FL_NORMAL_LABEL);
      inpLoc_log->labelfont(0);
      inpLoc_log->labelsize(14);
      inpLoc_log->labelcolor(FL_FOREGROUND_COLOR);
      inpLoc_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpLoc_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpLoc_log
    { inpRstS_log = new Fl_Input2(468, 68, 36, 24, _("Out"));
      inpRstS_log->tooltip(_("Rst sent"));
      inpRstS_log->box(FL_DOWN_BOX);
      inpRstS_log->color(FL_BACKGROUND2_COLOR);
      inpRstS_log->selection_color(FL_SELECTION_COLOR);
      inpRstS_log->labeltype(FL_NORMAL_LABEL);
      inpRstS_log->labelfont(0);
      inpRstS_log->labelsize(14);
      inpRstS_log->labelcolor(FL_FOREGROUND_COLOR);
      inpRstS_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpRstS_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpRstS_log
    { inpQth_log = new Fl_Input2(5, 112, 280, 24, _("Qth"));
      inpQth_log->tooltip(_("City of station worked"));
      inpQth_log->box(FL_DOWN_BOX);
      inpQth_log->color(FL_BACKGROUND2_COLOR);
      inpQth_log->selection_color(FL_SELECTION_COLOR);
      inpQth_log->labeltype(FL_NORMAL_LABEL);
      inpQth_log->labelfont(0);
      inpQth_log->labelsize(14);
      inpQth_log->labelcolor(FL_FOREGROUND_COLOR);
      inpQth_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpQth_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpQth_log
    { inpState_log = new Fl_Input2(288, 112, 44, 24, _("St"));
      inpState_log->tooltip(_("US state of station worked"));
      inpState_log->box(FL_DOWN_BOX);
      inpState_log->color(FL_BACKGROUND2_COLOR);
      inpState_log->selection_color(FL_SELECTION_COLOR);
      inpState_log->labeltype(FL_NORMAL_LABEL);
      inpState_log->labelfont(0);
      inpState_log->labelsize(14);
      inpState_log->labelcolor(FL_FOREGROUND_COLOR);
      inpState_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpState_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpState_log
    { inpVE_Prov_log = new Fl_Input2(335, 112, 44, 24, _("Pr"));
      inpVE_Prov_log->tooltip(_("Province of station worked"));
      inpVE_Prov_log->box(FL_DOWN_BOX);
      inpVE_Prov_log->color(FL_BACKGROUND2_COLOR);
      inpVE_Prov_log->selection_color(FL_SELECTION_COLOR);
      inpVE_Prov_log->labeltype(FL_NORMAL_LABEL);
      inpVE_Prov_log->labelfont(0);
      inpVE_Prov_log->labelsize(14);
      inpVE_Prov_log->labelcolor(FL_FOREGROUND_COLOR);
      inpVE_Prov_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpVE_Prov_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpVE_Prov_log
    { inpCountry_log = new Fl_Input2(382, 112, 202, 24, _("Country"));
      inpCountry_log->tooltip(_("Country of station worked"));
      inpCountry_log->box(FL_DOWN_BOX);
      inpCountry_log->color(FL_BACKGROUND2_COLOR);
      inpCountry_log->selection_color(FL_SELECTION_COLOR);
      inpCountry_log->labeltype(FL_NORMAL_LABEL);
      inpCountry_log->labelfont(0);
      inpCountry_log->labelsize(14);
      inpCountry_log->labelcolor(FL_FOREGROUND_COLOR);
      inpCountry_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpCountry_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpCountry_log
    { Fl_Group* o = grpTabsSearch = new Fl_Group(0, 137, 590, 125);
      { Tabs = new Fl_Tabs(0, 140, 481, 120);
        { tab_log_qsl = new Fl_Group(0, 161, 481, 97, _("QSL"));
          { Fl_DateInput* o = inpQSLrcvddate_log = new Fl_DateInput(14, 188, 100, 24, _("QSL-rcvd"));
            inpQSLrcvddate_log->tooltip(_("QSL received on this date"));
            inpQSLrcvddate_log->box(FL_DOWN_BOX);
            inpQSLrcvddate_log->color(FL_BACKGROUND2_COLOR);
            inpQSLrcvddate_log->selection_color(FL_SELECTION_COLOR);
            inpQSLrcvddate_log->labeltype(FL_NORMAL_LABEL);
            inpQSLrcvddate_log->labelfont(0);
            inpQSLrcvddate_log->labelsize(14);
            inpQSLrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpQSLrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpQSLrcvddate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpQSLrcvddate_log
          { Fl_DateInput* o = inpEQSLrcvddate_log = new Fl_DateInput(118, 188, 100, 24, _("EQSL-rcvd"));
            inpEQSLrcvddate_log->tooltip(_("QSL received on this date"));
            inpEQSLrcvddate_log->box(FL_DOWN_BOX);
            inpEQSLrcvddate_log->color(FL_BACKGROUND2_COLOR);
            inpEQSLrcvddate_log->selection_color(FL_SELECTION_COLOR);
            inpEQSLrcvddate_log->labeltype(FL_NORMAL_LABEL);
            inpEQSLrcvddate_log->labelfont(0);
            inpEQSLrcvddate_log->labelsize(14);
            inpEQSLrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpEQSLrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpEQSLrcvddate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpEQSLrcvddate_log
          { Fl_DateInput* o = inpLOTWrcvddate_log = new Fl_DateInput(222, 188, 100, 24, _("LOTW-rcvd"));
            inpLOTWrcvddate_log->tooltip(_("QSL received on this date"));
            inpLOTWrcvddate_log->box(FL_DOWN_BOX);
            inpLOTWrcvddate_log->color(FL_BACKGROUND2_COLOR);
            inpLOTWrcvddate_log->selection_color(FL_SELECTION_COLOR);
            inpLOTWrcvddate_log->labeltype(FL_NORMAL_LABEL);
            inpLOTWrcvddate_log->labelfont(0);
            inpLOTWrcvddate_log->labelsize(14);
            inpLOTWrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpLOTWrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpLOTWrcvddate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpLOTWrcvddate_log
          { Fl_DateInput* o = inpQSLsentdate_log = new Fl_DateInput(14, 234, 100, 24, _("QSL-sent"));
            inpQSLsentdate_log->tooltip(_("QSL sent on this date"));
            inpQSLsentdate_log->box(FL_DOWN_BOX);
            inpQSLsentdate_log->color(FL_BACKGROUND2_COLOR);
            inpQSLsentdate_log->selection_color(FL_SELECTION_COLOR);
            inpQSLsentdate_log->labeltype(FL_NORMAL_LABEL);
            inpQSLsentdate_log->labelfont(0);
            inpQSLsentdate_log->labelsize(14);
            inpQSLsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpQSLsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpQSLsentdate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpQSLsentdate_log
          { Fl_DateInput* o = inpEQSLsentdate_log = new Fl_DateInput(118, 234, 100, 24, _("EQSL-sent"));
            inpEQSLsentdate_log->tooltip(_("QSL sent on this date"));
            inpEQSLsentdate_log->box(FL_DOWN_BOX);
            inpEQSLsentdate_log->color(FL_BACKGROUND2_COLOR);
            inpEQSLsentdate_log->selection_color(FL_SELECTION_COLOR);
            inpEQSLsentdate_log->labeltype(FL_NORMAL_LABEL);
            inpEQSLsentdate_log->labelfont(0);
            inpEQSLsentdate_log->labelsize(14);
            inpEQSLsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpEQSLsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpEQSLsentdate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpEQSLsentdate_log
          { Fl_DateInput* o = inpLOTWsentdate_log = new Fl_DateInput(222, 234, 100, 24, _("LOTW-sent"));
            inpLOTWsentdate_log->tooltip(_("QSL sent on this date"));
            inpLOTWsentdate_log->box(FL_DOWN_BOX);
            inpLOTWsentdate_log->color(FL_BACKGROUND2_COLOR);
            inpLOTWsentdate_log->selection_color(FL_SELECTION_COLOR);
            inpLOTWsentdate_log->labeltype(FL_NORMAL_LABEL);
            inpLOTWsentdate_log->labelfont(0);
            inpLOTWsentdate_log->labelsize(14);
            inpLOTWsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
            inpLOTWsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpLOTWsentdate_log->when(FL_WHEN_RELEASE);
            o->format(2);
          } // Fl_DateInput* inpLOTWsentdate_log
          { inpQSL_VIA_log = new Fl_Input2(325, 188, 156, 70, _("QSL-VIA"));
            inpQSL_VIA_log->tooltip(_("QSL route of contacted station"));
            inpQSL_VIA_log->type(4);
            inpQSL_VIA_log->box(FL_DOWN_BOX);
            inpQSL_VIA_log->color(FL_BACKGROUND2_COLOR);
            inpQSL_VIA_log->selection_color(FL_SELECTION_COLOR);
            inpQSL_VIA_log->labeltype(FL_NORMAL_LABEL);
            inpQSL_VIA_log->labelfont(0);
            inpQSL_VIA_log->labelsize(14);
            inpQSL_VIA_log->labelcolor(FL_FOREGROUND_COLOR);
            inpQSL_VIA_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpQSL_VIA_log->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(inpQSL_VIA_log);
          } // Fl_Input2* inpQSL_VIA_log
          tab_log_qsl->end();
        } // Fl_Group* tab_log_qsl
        { tab_log_other = new Fl_Group(0, 161, 475, 99, _("Other"));
          tab_log_other->hide();
          { inpCNTY_log = new Fl_Input2(21, 192, 241, 24, _("County"));
            inpCNTY_log->tooltip(_("County"));
            inpCNTY_log->box(FL_DOWN_BOX);
            inpCNTY_log->color(FL_BACKGROUND2_COLOR);
            inpCNTY_log->selection_color(FL_SELECTION_COLOR);
            inpCNTY_log->labeltype(FL_NORMAL_LABEL);
            inpCNTY_log->labelfont(0);
            inpCNTY_log->labelsize(14);
            inpCNTY_log->labelcolor(FL_FOREGROUND_COLOR);
            inpCNTY_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpCNTY_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpCNTY_log
          { inpIOTA_log = new Fl_Input2(276, 192, 90, 24, _("IOTA"));
            inpIOTA_log->tooltip(_("Islands on the air"));
            inpIOTA_log->box(FL_DOWN_BOX);
            inpIOTA_log->color(FL_BACKGROUND2_COLOR);
            inpIOTA_log->selection_color(FL_SELECTION_COLOR);
            inpIOTA_log->labeltype(FL_NORMAL_LABEL);
            inpIOTA_log->labelfont(0);
            inpIOTA_log->labelsize(14);
            inpIOTA_log->labelcolor(FL_FOREGROUND_COLOR);
            inpIOTA_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpIOTA_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpIOTA_log
          { inpCQZ_log = new Fl_Input2(383, 192, 90, 24, _("CQZ"));
            inpCQZ_log->tooltip(_("CQ zone"));
            inpCQZ_log->box(FL_DOWN_BOX);
            inpCQZ_log->color(FL_BACKGROUND2_COLOR);
            inpCQZ_log->selection_color(FL_SELECTION_COLOR);
            inpCQZ_log->labeltype(FL_NORMAL_LABEL);
            inpCQZ_log->labelfont(0);
            inpCQZ_log->labelsize(14);
            inpCQZ_log->labelcolor(FL_FOREGROUND_COLOR);
            inpCQZ_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpCQZ_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpCQZ_log
          { inpCONT_log = new Fl_Input2(21, 236, 241, 24, _("Cont\'"));
            inpCONT_log->tooltip(_("Continent"));
            inpCONT_log->box(FL_DOWN_BOX);
            inpCONT_log->color(FL_BACKGROUND2_COLOR);
            inpCONT_log->selection_color(FL_SELECTION_COLOR);
            inpCONT_log->labeltype(FL_NORMAL_LABEL);
            inpCONT_log->labelfont(0);
            inpCONT_log->labelsize(14);
            inpCONT_log->labelcolor(FL_FOREGROUND_COLOR);
            inpCONT_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpCONT_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpCONT_log
          { inpITUZ_log = new Fl_Input2(277, 236, 90, 24, _("ITUZ"));
            inpITUZ_log->tooltip(_("ITU zone"));
            inpITUZ_log->box(FL_DOWN_BOX);
            inpITUZ_log->color(FL_BACKGROUND2_COLOR);
            inpITUZ_log->selection_color(FL_SELECTION_COLOR);
            inpITUZ_log->labeltype(FL_NORMAL_LABEL);
            inpITUZ_log->labelfont(0);
            inpITUZ_log->labelsize(14);
            inpITUZ_log->labelcolor(FL_FOREGROUND_COLOR);
            inpITUZ_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpITUZ_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpITUZ_log
          { inpDXCC_log = new Fl_Input2(383, 236, 90, 24, _("DXCC"));
            inpDXCC_log->tooltip(_("DXCC designator"));
            inpDXCC_log->box(FL_DOWN_BOX);
            inpDXCC_log->color(FL_BACKGROUND2_COLOR);
            inpDXCC_log->selection_color(FL_SELECTION_COLOR);
            inpDXCC_log->labeltype(FL_NORMAL_LABEL);
            inpDXCC_log->labelfont(0);
            inpDXCC_log->labelsize(14);
            inpDXCC_log->labelcolor(FL_FOREGROUND_COLOR);
            inpDXCC_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inpDXCC_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpDXCC_log
          tab_log_other->end();
        } // Fl_Group* tab_log_other
        { tab_log_notes = new Fl_Group(0, 161, 480, 96, _("Notes"));
          tab_log_notes->hide();
          { inpNotes_log = new Fl_Input2(15, 171, 465, 85);
            inpNotes_log->tooltip(_("Interesting notes"));
            inpNotes_log->type(4);
            inpNotes_log->box(FL_DOWN_BOX);
            inpNotes_log->color(FL_BACKGROUND2_COLOR);
            inpNotes_log->selection_color(FL_SELECTION_COLOR);
            inpNotes_log->labeltype(FL_NORMAL_LABEL);
            inpNotes_log->labelfont(0);
            inpNotes_log->labelsize(14);
            inpNotes_log->labelcolor(FL_FOREGROUND_COLOR);
            inpNotes_log->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            inpNotes_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpNotes_log
          tab_log_notes->end();
        } // Fl_Group* tab_log_notes
        { tab_log_my_station = new Fl_Group(0, 161, 475, 99, _("My Station"));
          tab_log_my_station->hide();
          { inp_log_sta_call = new Fl_Input2(15, 192, 100, 24, _("Station Call"));
            inp_log_sta_call->tooltip(_("Interesting notes"));
            inp_log_sta_call->box(FL_DOWN_BOX);
            inp_log_sta_call->color(FL_BACKGROUND2_COLOR);
            inp_log_sta_call->selection_color(FL_SELECTION_COLOR);
            inp_log_sta_call->labeltype(FL_NORMAL_LABEL);
            inp_log_sta_call->labelfont(0);
            inp_log_sta_call->labelsize(14);
            inp_log_sta_call->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_sta_call->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inp_log_sta_call->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_sta_call
          { inp_log_op_call = new Fl_Input2(140, 192, 100, 24, _("Operator Call"));
            inp_log_op_call->tooltip(_("Interesting notes"));
            inp_log_op_call->box(FL_DOWN_BOX);
            inp_log_op_call->color(FL_BACKGROUND2_COLOR);
            inp_log_op_call->selection_color(FL_SELECTION_COLOR);
            inp_log_op_call->labeltype(FL_NORMAL_LABEL);
            inp_log_op_call->labelfont(0);
            inp_log_op_call->labelsize(14);
            inp_log_op_call->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_op_call->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inp_log_op_call->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_op_call
          { inp_log_sta_qth = new Fl_Input2(15, 236, 334, 24, _("Station QTH"));
            inp_log_sta_qth->tooltip(_("Interesting notes"));
            inp_log_sta_qth->box(FL_DOWN_BOX);
            inp_log_sta_qth->color(FL_BACKGROUND2_COLOR);
            inp_log_sta_qth->selection_color(FL_SELECTION_COLOR);
            inp_log_sta_qth->labeltype(FL_NORMAL_LABEL);
            inp_log_sta_qth->labelfont(0);
            inp_log_sta_qth->labelsize(14);
            inp_log_sta_qth->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_sta_qth->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inp_log_sta_qth->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_sta_qth
          { inp_log_sta_loc = new Fl_Input2(355, 236, 120, 24, _("Station Locator"));
            inp_log_sta_loc->tooltip(_("Interesting notes"));
            inp_log_sta_loc->box(FL_DOWN_BOX);
            inp_log_sta_loc->color(FL_BACKGROUND2_COLOR);
            inp_log_sta_loc->selection_color(FL_SELECTION_COLOR);
            inp_log_sta_loc->labeltype(FL_NORMAL_LABEL);
            inp_log_sta_loc->labelfont(0);
            inp_log_sta_loc->labelsize(14);
            inp_log_sta_loc->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_sta_loc->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inp_log_sta_loc->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_sta_loc
          tab_log_my_station->end();
        } // Fl_Group* tab_log_my_station
        { tab_log_contest = new Fl_Group(0, 161, 480, 99, _("Contest"));
          tab_log_contest->hide();
          { inpSerNoOut_log = new Fl_Input2(69, 179, 55, 24, _("Ser out"));
            inpSerNoOut_log->tooltip(_("Contest seral # sent"));
            inpSerNoOut_log->box(FL_DOWN_BOX);
            inpSerNoOut_log->color(FL_BACKGROUND2_COLOR);
            inpSerNoOut_log->selection_color(FL_SELECTION_COLOR);
            inpSerNoOut_log->labeltype(FL_NORMAL_LABEL);
            inpSerNoOut_log->labelfont(0);
            inpSerNoOut_log->labelsize(14);
            inpSerNoOut_log->labelcolor(FL_FOREGROUND_COLOR);
            inpSerNoOut_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpSerNoOut_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpSerNoOut_log
          { inpMyXchg_log = new Fl_Input2(204, 179, 170, 24, _("Exch Out"));
            inpMyXchg_log->tooltip(_("Contest exchange sent"));
            inpMyXchg_log->box(FL_DOWN_BOX);
            inpMyXchg_log->color(FL_BACKGROUND2_COLOR);
            inpMyXchg_log->selection_color(FL_SELECTION_COLOR);
            inpMyXchg_log->labeltype(FL_NORMAL_LABEL);
            inpMyXchg_log->labelfont(0);
            inpMyXchg_log->labelsize(14);
            inpMyXchg_log->labelcolor(FL_FOREGROUND_COLOR);
            inpMyXchg_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpMyXchg_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpMyXchg_log
          { inpSerNoIn_log = new Fl_Input2(69, 207, 55, 24, _("Ser in"));
            inpSerNoIn_log->tooltip(_("Contest serial # received"));
            inpSerNoIn_log->box(FL_DOWN_BOX);
            inpSerNoIn_log->color(FL_BACKGROUND2_COLOR);
            inpSerNoIn_log->selection_color(FL_SELECTION_COLOR);
            inpSerNoIn_log->labeltype(FL_NORMAL_LABEL);
            inpSerNoIn_log->labelfont(0);
            inpSerNoIn_log->labelsize(14);
            inpSerNoIn_log->labelcolor(FL_FOREGROUND_COLOR);
            inpSerNoIn_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpSerNoIn_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpSerNoIn_log
          { inpXchgIn_log = new Fl_Input2(204, 207, 170, 24, _("Exch In"));
            inpXchgIn_log->tooltip(_("Contest exchange received"));
            inpXchgIn_log->box(FL_DOWN_BOX);
            inpXchgIn_log->color(FL_BACKGROUND2_COLOR);
            inpXchgIn_log->selection_color(FL_SELECTION_COLOR);
            inpXchgIn_log->labeltype(FL_NORMAL_LABEL);
            inpXchgIn_log->labelfont(0);
            inpXchgIn_log->labelsize(14);
            inpXchgIn_log->labelcolor(FL_FOREGROUND_COLOR);
            inpXchgIn_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpXchgIn_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpXchgIn_log
          { inpClass_log = new Fl_Input2(69, 236, 55, 24, _("Class"));
            inpClass_log->tooltip(_("Field Day class received"));
            inpClass_log->box(FL_DOWN_BOX);
            inpClass_log->color(FL_BACKGROUND2_COLOR);
            inpClass_log->selection_color(FL_SELECTION_COLOR);
            inpClass_log->labeltype(FL_NORMAL_LABEL);
            inpClass_log->labelfont(0);
            inpClass_log->labelsize(14);
            inpClass_log->labelcolor(FL_FOREGROUND_COLOR);
            inpClass_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpClass_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpClass_log
          { inpSection_log = new Fl_Input2(204, 236, 56, 24, _("ARRL Sect"));
            inpSection_log->tooltip(_("Field Section received"));
            inpSection_log->box(FL_DOWN_BOX);
            inpSection_log->color(FL_BACKGROUND2_COLOR);
            inpSection_log->selection_color(FL_SELECTION_COLOR);
            inpSection_log->labeltype(FL_NORMAL_LABEL);
            inpSection_log->labelfont(0);
            inpSection_log->labelsize(14);
            inpSection_log->labelcolor(FL_FOREGROUND_COLOR);
            inpSection_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpSection_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpSection_log
          { inp_age_log = new Fl_Input2(420, 179, 60, 24, _("Age"));
            inp_age_log->tooltip(_("Operators age received"));
            inp_age_log->box(FL_DOWN_BOX);
            inp_age_log->color(FL_BACKGROUND2_COLOR);
            inp_age_log->selection_color(FL_SELECTION_COLOR);
            inp_age_log->labeltype(FL_NORMAL_LABEL);
            inp_age_log->labelfont(0);
            inp_age_log->labelsize(14);
            inp_age_log->labelcolor(FL_FOREGROUND_COLOR);
            inp_age_log->align(Fl_Align(FL_ALIGN_LEFT));
            inp_age_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_age_log
          { inp_1010_log = new Fl_Input2(420, 207, 60, 24, _("10-10"));
            inp_1010_log->tooltip(_("Ten Ten number received"));
            inp_1010_log->box(FL_DOWN_BOX);
            inp_1010_log->color(FL_BACKGROUND2_COLOR);
            inp_1010_log->selection_color(FL_SELECTION_COLOR);
            inp_1010_log->labeltype(FL_NORMAL_LABEL);
            inp_1010_log->labelfont(0);
            inp_1010_log->labelsize(14);
            inp_1010_log->labelcolor(FL_FOREGROUND_COLOR);
            inp_1010_log->align(Fl_Align(FL_ALIGN_LEFT));
            inp_1010_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_1010_log
          { inpBand_log = new Fl_Input2(420, 236, 60, 24, _("Band"));
            inpBand_log->tooltip(_("Operating band"));
            inpBand_log->box(FL_DOWN_BOX);
            inpBand_log->color(FL_BACKGROUND2_COLOR);
            inpBand_log->selection_color(FL_SELECTION_COLOR);
            inpBand_log->labeltype(FL_NORMAL_LABEL);
            inpBand_log->labelfont(0);
            inpBand_log->labelsize(14);
            inpBand_log->labelcolor(FL_FOREGROUND_COLOR);
            inpBand_log->align(Fl_Align(FL_ALIGN_LEFT));
            inpBand_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inpBand_log
          { inp_check_log = new Fl_Input2(314, 236, 60, 24, _("Check"));
            inp_check_log->tooltip(_("Check value received"));
            inp_check_log->box(FL_DOWN_BOX);
            inp_check_log->color(FL_BACKGROUND2_COLOR);
            inp_check_log->selection_color(FL_SELECTION_COLOR);
            inp_check_log->labeltype(FL_NORMAL_LABEL);
            inp_check_log->labelfont(0);
            inp_check_log->labelsize(14);
            inp_check_log->labelcolor(FL_FOREGROUND_COLOR);
            inp_check_log->align(Fl_Align(FL_ALIGN_LEFT));
            inp_check_log->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_check_log
          tab_log_contest->end();
        } // Fl_Group* tab_log_contest
        { tab_log_cwss = new Fl_Group(0, 161, 475, 96, _("CW SS"));
          tab_log_cwss->tooltip(_("CW Sweepstakes Contest"));
          tab_log_cwss->hide();
          { inp_log_cwss_serno = new Fl_Input2(77, 179, 55, 24, _("Ser NoR"));
            inp_log_cwss_serno->tooltip(_("Contest seral # sent"));
            inp_log_cwss_serno->box(FL_DOWN_BOX);
            inp_log_cwss_serno->color(FL_BACKGROUND2_COLOR);
            inp_log_cwss_serno->selection_color(FL_SELECTION_COLOR);
            inp_log_cwss_serno->labeltype(FL_NORMAL_LABEL);
            inp_log_cwss_serno->labelfont(0);
            inp_log_cwss_serno->labelsize(14);
            inp_log_cwss_serno->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_cwss_serno->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_cwss_serno->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_cwss_serno
          { inp_log_cwss_sec = new Fl_Input2(77, 207, 56, 24, _("Section"));
            inp_log_cwss_sec->tooltip(_("SS section"));
            inp_log_cwss_sec->box(FL_DOWN_BOX);
            inp_log_cwss_sec->color(FL_BACKGROUND2_COLOR);
            inp_log_cwss_sec->selection_color(FL_SELECTION_COLOR);
            inp_log_cwss_sec->labeltype(FL_NORMAL_LABEL);
            inp_log_cwss_sec->labelfont(0);
            inp_log_cwss_sec->labelsize(14);
            inp_log_cwss_sec->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_cwss_sec->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_cwss_sec->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_cwss_sec
          { inp_log_cwss_prec = new Fl_Input2(238, 179, 77, 24, _("Precedence"));
            inp_log_cwss_prec->tooltip(_("Contest exchange sent"));
            inp_log_cwss_prec->box(FL_DOWN_BOX);
            inp_log_cwss_prec->color(FL_BACKGROUND2_COLOR);
            inp_log_cwss_prec->selection_color(FL_SELECTION_COLOR);
            inp_log_cwss_prec->labeltype(FL_NORMAL_LABEL);
            inp_log_cwss_prec->labelfont(0);
            inp_log_cwss_prec->labelsize(14);
            inp_log_cwss_prec->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_cwss_prec->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_cwss_prec->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_cwss_prec
          { inp_log_cwss_chk = new Fl_Input2(238, 207, 77, 24, _("Check"));
            inp_log_cwss_chk->tooltip(_("Contest exchange received"));
            inp_log_cwss_chk->box(FL_DOWN_BOX);
            inp_log_cwss_chk->color(FL_BACKGROUND2_COLOR);
            inp_log_cwss_chk->selection_color(FL_SELECTION_COLOR);
            inp_log_cwss_chk->labeltype(FL_NORMAL_LABEL);
            inp_log_cwss_chk->labelfont(0);
            inp_log_cwss_chk->labelsize(14);
            inp_log_cwss_chk->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_cwss_chk->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_cwss_chk->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_cwss_chk
          tab_log_cwss->end();
        } // Fl_Group* tab_log_cwss
        { tab_log_jota = new Fl_Group(0, 161, 475, 96, _("JOTA"));
          tab_log_jota->tooltip(_("Jamboree On The Air"));
          tab_log_jota->hide();
          { inp_log_troop_s = new Fl_Input2(115, 179, 100, 24, _("Troop-S"));
            inp_log_troop_s->tooltip(_("Sent troop number"));
            inp_log_troop_s->box(FL_DOWN_BOX);
            inp_log_troop_s->color(FL_BACKGROUND2_COLOR);
            inp_log_troop_s->selection_color(FL_SELECTION_COLOR);
            inp_log_troop_s->labeltype(FL_NORMAL_LABEL);
            inp_log_troop_s->labelfont(0);
            inp_log_troop_s->labelsize(14);
            inp_log_troop_s->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_troop_s->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_troop_s->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_troop_s
          { inp_log_troop_r = new Fl_Input2(292, 179, 100, 24, _("Troop-R"));
            inp_log_troop_r->tooltip(_("Received troop number"));
            inp_log_troop_r->box(FL_DOWN_BOX);
            inp_log_troop_r->color(FL_BACKGROUND2_COLOR);
            inp_log_troop_r->selection_color(FL_SELECTION_COLOR);
            inp_log_troop_r->labeltype(FL_NORMAL_LABEL);
            inp_log_troop_r->labelfont(0);
            inp_log_troop_r->labelsize(14);
            inp_log_troop_r->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_troop_r->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_troop_r->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_troop_r
          { inp_log_scout_s = new Fl_Input2(115, 215, 100, 24, _("Name-S"));
            inp_log_scout_s->tooltip(_("Sent scout name"));
            inp_log_scout_s->box(FL_DOWN_BOX);
            inp_log_scout_s->color(FL_BACKGROUND2_COLOR);
            inp_log_scout_s->selection_color(FL_SELECTION_COLOR);
            inp_log_scout_s->labeltype(FL_NORMAL_LABEL);
            inp_log_scout_s->labelfont(0);
            inp_log_scout_s->labelsize(14);
            inp_log_scout_s->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_scout_s->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_scout_s->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_scout_s
          { inp_log_scout_r = new Fl_Input2(292, 215, 100, 24, _("Name-R"));
            inp_log_scout_r->tooltip(_("Received scout name"));
            inp_log_scout_r->box(FL_DOWN_BOX);
            inp_log_scout_r->color(FL_BACKGROUND2_COLOR);
            inp_log_scout_r->selection_color(FL_SELECTION_COLOR);
            inp_log_scout_r->labeltype(FL_NORMAL_LABEL);
            inp_log_scout_r->labelfont(0);
            inp_log_scout_r->labelsize(14);
            inp_log_scout_r->labelcolor(FL_FOREGROUND_COLOR);
            inp_log_scout_r->align(Fl_Align(FL_ALIGN_LEFT));
            inp_log_scout_r->when(FL_WHEN_RELEASE);
          } // Fl_Input2* inp_log_scout_r
          tab_log_jota->end();
        } // Fl_Group* tab_log_jota
        Tabs->end();
      } // Fl_Tabs* Tabs
      { grpCallSearch = new Fl_Group(482, 137, 105, 125);
        { inpSearchString = new Fl_Input2(482, 160, 105, 24, _("Call Search"));
          inpSearchString->tooltip(_("Search for this callsign"));
          inpSearchString->box(FL_DOWN_BOX);
          inpSearchString->color(FL_BACKGROUND2_COLOR);
          inpSearchString->selection_color(FL_SELECTION_COLOR);
          inpSearchString->labeltype(FL_NORMAL_LABEL);
          inpSearchString->labelfont(0);
          inpSearchString->labelsize(14);
          inpSearchString->labelcolor(FL_FOREGROUND_COLOR);
          inpSearchString->align(Fl_Align(FL_ALIGN_TOP));
          inpSearchString->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpSearchString
        { bSearchPrev = new Fl_Button(500, 193, 24, 22);
          bSearchPrev->tooltip(_("Find previous"));
          bSearchPrev->color(FL_LIGHT1);
          bSearchPrev->selection_color((Fl_Color)48);
          bSearchPrev->callback((Fl_Callback*)cb_search);
          bSearchPrev->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          bSearchPrev->image(new Fl_Pixmap(left_arrow_icon));
        } // Fl_Button* bSearchPrev
        { bSearchNext = new Fl_Button(552, 193, 24, 22);
          bSearchNext->tooltip(_("Find next"));
          bSearchNext->color(FL_LIGHT1);
          bSearchNext->selection_color((Fl_Color)48);
          bSearchNext->callback((Fl_Callback*)cb_search);
          bSearchNext->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          bSearchNext->image(new Fl_Pixmap(right_arrow_icon));
        } // Fl_Button* bSearchNext
        { bRetrieve = new Fl_Button(500, 223, 75, 22, _("Retrieve"));
          bRetrieve->tooltip(_("Retrieve for active modem use"));
          bRetrieve->shortcut(0x50066);
          bRetrieve->color(FL_LIGHT1);
          bRetrieve->selection_color((Fl_Color)48);
          bRetrieve->callback((Fl_Callback*)cb_btnRetrieve);
        } // Fl_Button* bRetrieve
        grpCallSearch->end();
      } // Fl_Group* grpCallSearch
      o->resizable(Tabs);
      grpTabsSearch->end();
    } // Fl_Group* grpTabsSearch
    { Fl_Group* o = grpFileButtons = new Fl_Group(0, 262, 589, 25);
      { bNewSave = new Fl_Button(396, 263, 59, 22, _("New"));
        bNewSave->tooltip(_("New record / Save record"));
        bNewSave->shortcut(0x8004e);
        bNewSave->color(FL_LIGHT1);
        bNewSave->selection_color((Fl_Color)48);
        bNewSave->callback((Fl_Callback*)cb_btnNewSave);
      } // Fl_Button* bNewSave
      { bUpdateCancel = new Fl_Button(459, 263, 59, 22, _("Update"));
        bUpdateCancel->tooltip(_("Update the current record"));
        bUpdateCancel->shortcut(0x80055);
        bUpdateCancel->color(FL_LIGHT1);
        bUpdateCancel->selection_color((Fl_Color)48);
        bUpdateCancel->callback((Fl_Callback*)cb_btnUpdateCancel);
      } // Fl_Button* bUpdateCancel
      { bDelete = new Fl_Button(522, 263, 59, 22, _("Delete"));
        bDelete->tooltip(_("Delete the current record"));
        bDelete->shortcut(0x80044);
        bDelete->color(FL_LIGHT1);
        bDelete->selection_color((Fl_Color)48);
        bDelete->callback((Fl_Callback*)cb_btnDelete);
      } // Fl_Button* bDelete
      { txtLogFile = new Fl_Output(35, 263, 357, 22, _("File:"));
        txtLogFile->color(FL_LIGHT3);
      } // Fl_Output* txtLogFile
      o->resizable(txtLogFile);
      grpFileButtons->end();
    } // Fl_Group* grpFileButtons
    { wBrowser = new Table(2, 288, 586, 100);
      wBrowser->box(FL_DOWN_FRAME);
      wBrowser->color(FL_BACKGROUND2_COLOR);
      wBrowser->selection_color(FL_SELECTION_COLOR);
      wBrowser->labeltype(FL_NORMAL_LABEL);
      wBrowser->labelfont(0);
      wBrowser->labelsize(14);
      wBrowser->labelcolor(FL_FOREGROUND_COLOR);
      wBrowser->align(Fl_Align(FL_ALIGN_TOP));
      wBrowser->when(FL_WHEN_RELEASE);
      wBrowser->end();
      Fl_Group::current()->resizable(wBrowser);
    } // Table* wBrowser
    o->resizable(wBrowser);
    dlgLogbook->end();
  } // Fl_Double_Window* dlgLogbook
  wBrowser->align (FL_ALIGN_TOP | FL_ALIGN_LEFT);
  wBrowser->addColumn (_("Date"),85);
  wBrowser->colcallback (0,cb_SortByDate);
  wBrowser->addColumn (_("Time"),47);
  wBrowser->addColumn (_("Callsign"),100);
  wBrowser->colcallback (2,cb_SortByCall);
  wBrowser->addColumn (_("Name"),110);
  wBrowser->addColumn (_("Frequency"),120);
  wBrowser->colcallback (4,cb_SortByFreq);
  wBrowser->addColumn (_("Mode"),103);
  wBrowser->colcallback (5,cb_SortByMode);
  wBrowser->addHiddenColumn ("rn");
  wBrowser->allowSort(true);
  wBrowser->callback(cb_browser);
  wBrowser->when(FL_WHEN_CHANGED);
  wBrowser->rowSize (FL_NORMAL_SIZE);
  wBrowser->headerSize (FL_NORMAL_SIZE);
  wBrowser->allowResize (1);
  wBrowser->gridEnabled (0);
  dlgLogbook->xclass(PACKAGE_TARNAME);
  { wCabrillo = new Fl_Double_Window(675, 340, _("Cabrillo Setup"));
    { Fl_Group* o = new Fl_Group(4, 4, 388, 305, _("Select Records to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { chkCabBrowser = new Fl_Check_Browser(13, 25, 370, 245);
      } // Fl_Check_Browser* chkCabBrowser
      { btnCabClearAll = new Fl_Button(69, 277, 110, 24, _("Clear All"));
        btnCabClearAll->callback((Fl_Callback*)cb_btnCabClearAll);
      } // Fl_Button* btnCabClearAll
      { btnCabCheckAll = new Fl_Button(200, 277, 110, 24, _("Check All"));
        btnCabCheckAll->callback((Fl_Callback*)cb_btnCabCheckAll);
      } // Fl_Button* btnCabCheckAll
      o->end();
    } // Fl_Group* o
    { btnCabOK = new Fl_Return_Button(544, 312, 100, 24, _("OK"));
      btnCabOK->callback((Fl_Callback*)cb_btnCabOK);
    } // Fl_Return_Button* btnCabOK
    { btnCabCancel = new Fl_Button(414, 312, 100, 24, _("Cancel"));
      btnCabCancel->callback((Fl_Callback*)cb_btnCabCancel);
    } // Fl_Button* btnCabCancel
    { Fl_Group* o = new Fl_Group(390, 4, 283, 305, _("Select Cabrillo Contest & Fields"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { cboContest = new Fl_ComboBox(486, 41, 180, 20, _("Contest:"));
        cboContest->box(FL_BORDER_BOX);
        cboContest->color(FL_BACKGROUND2_COLOR);
        cboContest->selection_color(FL_BACKGROUND_COLOR);
        cboContest->labeltype(FL_NORMAL_LABEL);
        cboContest->labelfont(0);
        cboContest->labelsize(14);
        cboContest->labelcolor(FL_FOREGROUND_COLOR);
        cboContest->callback((Fl_Callback*)cb_cboContest);
        cboContest->align(Fl_Align(FL_ALIGN_LEFT));
        cboContest->when(FL_WHEN_RELEASE);
        cboContest->end();
      } // Fl_ComboBox* cboContest
      { btnCabCall = new Fl_Check_Button(423, 75, 70, 16, _("Call"));
        btnCabCall->down_box(FL_DOWN_BOX);
        btnCabCall->value(1);
      } // Fl_Check_Button* btnCabCall
      { btnCabFreq = new Fl_Check_Button(423, 100, 70, 15, _("Freq"));
        btnCabFreq->down_box(FL_DOWN_BOX);
        btnCabFreq->value(1);
      } // Fl_Check_Button* btnCabFreq
      { btnCabMode = new Fl_Check_Button(423, 124, 70, 15, _("Mode"));
        btnCabMode->down_box(FL_DOWN_BOX);
        btnCabMode->value(1);
      } // Fl_Check_Button* btnCabMode
      { btnCabQSOdate = new Fl_Check_Button(423, 148, 70, 15, _("QSO Date"));
        btnCabQSOdate->down_box(FL_DOWN_BOX);
        btnCabQSOdate->value(1);
      } // Fl_Check_Button* btnCabQSOdate
      { btnCabTimeOFF = new Fl_Check_Button(423, 172, 70, 15, _("Time OFF"));
        btnCabTimeOFF->down_box(FL_DOWN_BOX);
        btnCabTimeOFF->value(1);
      } // Fl_Check_Button* btnCabTimeOFF
      { btnCabRSTsent = new Fl_Check_Button(423, 196, 70, 15, _("RST sent"));
        btnCabRSTsent->down_box(FL_DOWN_BOX);
        btnCabRSTsent->value(1);
      } // Fl_Check_Button* btnCabRSTsent
      { btnCabRSTrcvd = new Fl_Check_Button(423, 221, 70, 16, _("RST rcvd"));
        btnCabRSTrcvd->down_box(FL_DOWN_BOX);
        btnCabRSTrcvd->value(1);
      } // Fl_Check_Button* btnCabRSTrcvd
      { btnCabSerialIN = new Fl_Check_Button(533, 100, 70, 15, _("Serial # in"));
        btnCabSerialIN->down_box(FL_DOWN_BOX);
        btnCabSerialIN->value(1);
      } // Fl_Check_Button* btnCabSerialIN
      { btnCabSerialOUT = new Fl_Check_Button(533, 124, 70, 15, _("Serial # out"));
        btnCabSerialOUT->down_box(FL_DOWN_BOX);
        btnCabSerialOUT->value(1);
      } // Fl_Check_Button* btnCabSerialOUT
      { btnCabXchgIn = new Fl_Check_Button(533, 148, 70, 15, _("Exchange In"));
        btnCabXchgIn->down_box(FL_DOWN_BOX);
        btnCabXchgIn->value(1);
      } // Fl_Check_Button* btnCabXchgIn
      { btnCabMyXchg = new Fl_Check_Button(533, 172, 70, 15, _("Exchange Out"));
        btnCabMyXchg->down_box(FL_DOWN_BOX);
        btnCabMyXchg->value(1);
      } // Fl_Check_Button* btnCabMyXchg
      { btnCabState = new Fl_Check_Button(533, 196, 70, 15, _("State"));
        btnCabState->down_box(FL_DOWN_BOX);
        btnCabState->value(1);
      } // Fl_Check_Button* btnCabState
      { btnCabCounty = new Fl_Check_Button(533, 221, 70, 15, _("County"));
        btnCabCounty->down_box(FL_DOWN_BOX);
        btnCabCounty->value(1);
      } // Fl_Check_Button* btnCabCounty
      { btnCabClearAllFields = new Fl_Button(409, 277, 110, 24, _("Clear All"));
        btnCabClearAllFields->callback((Fl_Callback*)cb_btnCabClearAllFields);
      } // Fl_Button* btnCabClearAllFields
      { btnCabCheckAllFields = new Fl_Button(539, 277, 110, 24, _("Check All"));
        btnCabCheckAllFields->callback((Fl_Callback*)cb_btnCabCheckAllFields);
      } // Fl_Button* btnCabCheckAllFields
      o->end();
    } // Fl_Group* o
    wCabrillo->end();
  } // Fl_Double_Window* wCabrillo
  { wUDPfields = new Fl_Double_Window(423, 405, _("UDP export fields"));
    { Fl_Group* o = new Fl_Group(5, 5, 410, 397, _("Select Fields to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { Fl_Check_Button* o = btn_udp_Call = new Fl_Check_Button(13, 26, 70, 15, _("Call"));
        btn_udp_Call->down_box(FL_DOWN_BOX);
        btn_udp_Call->value(1);
        btn_udp_Call->callback((Fl_Callback*)cb_btn_udp_Call);
        o->value(udp_fields.call);
      } // Fl_Check_Button* btn_udp_Call
      { Fl_Check_Button* o = btn_udp_Name = new Fl_Check_Button(13, 47, 70, 15, _("Name"));
        btn_udp_Name->down_box(FL_DOWN_BOX);
        btn_udp_Name->value(1);
        btn_udp_Name->callback((Fl_Callback*)cb_btn_udp_Name);
        o->value(udp_fields.name);
      } // Fl_Check_Button* btn_udp_Name
      { Fl_Check_Button* o = btn_udp_Freq = new Fl_Check_Button(13, 68, 70, 15, _("Freq"));
        btn_udp_Freq->down_box(FL_DOWN_BOX);
        btn_udp_Freq->value(1);
        btn_udp_Freq->callback((Fl_Callback*)cb_btn_udp_Freq);
        o->value(udp_fields.freq);
      } // Fl_Check_Button* btn_udp_Freq
      { Fl_Check_Button* o = btn_udp_Band = new Fl_Check_Button(13, 90, 70, 15, _("Band"));
        btn_udp_Band->down_box(FL_DOWN_BOX);
        btn_udp_Band->callback((Fl_Callback*)cb_btn_udp_Band);
        o->value(udp_fields.band);
      } // Fl_Check_Button* btn_udp_Band
      { Fl_Check_Button* o = btn_udp_Mode = new Fl_Check_Button(13, 111, 70, 15, _("Mode"));
        btn_udp_Mode->down_box(FL_DOWN_BOX);
        btn_udp_Mode->value(1);
        btn_udp_Mode->callback((Fl_Callback*)cb_btn_udp_Mode);
        o->value(udp_fields.mode);
      } // Fl_Check_Button* btn_udp_Mode
      { Fl_Check_Button* o = btn_udp_QSOdateOn = new Fl_Check_Button(13, 133, 70, 15, _("QSO Date On"));
        btn_udp_QSOdateOn->down_box(FL_DOWN_BOX);
        btn_udp_QSOdateOn->value(1);
        btn_udp_QSOdateOn->callback((Fl_Callback*)cb_btn_udp_QSOdateOn);
        o->value(udp_fields.date_on);
      } // Fl_Check_Button* btn_udp_QSOdateOn
      { Fl_Check_Button* o = btn_udp_QSOdateOff = new Fl_Check_Button(13, 154, 70, 15, _("QSO Date Off"));
        btn_udp_QSOdateOff->down_box(FL_DOWN_BOX);
        btn_udp_QSOdateOff->value(1);
        btn_udp_QSOdateOff->callback((Fl_Callback*)cb_btn_udp_QSOdateOff);
        o->value(udp_fields.date_off);
      } // Fl_Check_Button* btn_udp_QSOdateOff
      { Fl_Check_Button* o = btn_udp_TimeON = new Fl_Check_Button(13, 176, 70, 15, _("Time ON"));
        btn_udp_TimeON->down_box(FL_DOWN_BOX);
        btn_udp_TimeON->value(1);
        btn_udp_TimeON->callback((Fl_Callback*)cb_btn_udp_TimeON);
        o->value(udp_fields.time_on);
      } // Fl_Check_Button* btn_udp_TimeON
      { Fl_Check_Button* o = btn_udp_TimeOFF = new Fl_Check_Button(13, 197, 70, 15, _("Time OFF"));
        btn_udp_TimeOFF->down_box(FL_DOWN_BOX);
        btn_udp_TimeOFF->callback((Fl_Callback*)cb_btn_udp_TimeOFF);
        o->value(udp_fields.time_off);
      } // Fl_Check_Button* btn_udp_TimeOFF
      { Fl_Check_Button* o = btn_udp_TX_pwr = new Fl_Check_Button(13, 219, 70, 15, _("TX Power"));
        btn_udp_TX_pwr->down_box(FL_DOWN_BOX);
        btn_udp_TX_pwr->callback((Fl_Callback*)cb_btn_udp_TX_pwr);
        o->value(udp_fields.tx_pwr);
      } // Fl_Check_Button* btn_udp_TX_pwr
      { Fl_Check_Button* o = btn_udp_RSTsent = new Fl_Check_Button(13, 240, 70, 15, _("RST sent"));
        btn_udp_RSTsent->down_box(FL_DOWN_BOX);
        btn_udp_RSTsent->value(1);
        btn_udp_RSTsent->callback((Fl_Callback*)cb_btn_udp_RSTsent);
        o->value(udp_fields.rst_sent);
      } // Fl_Check_Button* btn_udp_RSTsent
      { Fl_Check_Button* o = btn_udp_RSTrcvd = new Fl_Check_Button(13, 262, 70, 15, _("RST rcvd"));
        btn_udp_RSTrcvd->down_box(FL_DOWN_BOX);
        btn_udp_RSTrcvd->value(1);
        btn_udp_RSTrcvd->callback((Fl_Callback*)cb_btn_udp_RSTrcvd);
        o->value(udp_fields.rst_rcvd);
      } // Fl_Check_Button* btn_udp_RSTrcvd
      { Fl_Check_Button* o = btn_udp_Qth = new Fl_Check_Button(13, 283, 70, 15, _("Qth"));
        btn_udp_Qth->down_box(FL_DOWN_BOX);
        btn_udp_Qth->callback((Fl_Callback*)cb_btn_udp_Qth);
        o->value(udp_fields.qth);
      } // Fl_Check_Button* btn_udp_Qth
      { Fl_Check_Button* o = btn_udp_LOC = new Fl_Check_Button(13, 305, 70, 15, _("LOC"));
        btn_udp_LOC->down_box(FL_DOWN_BOX);
        btn_udp_LOC->callback((Fl_Callback*)cb_btn_udp_LOC);
        o->value(udp_fields.gridsquare);
      } // Fl_Check_Button* btn_udp_LOC
      { Fl_Check_Button* o = btn_udp_State = new Fl_Check_Button(13, 326, 70, 15, _("State"));
        btn_udp_State->down_box(FL_DOWN_BOX);
        btn_udp_State->callback((Fl_Callback*)cb_btn_udp_State);
        o->value(udp_fields.state);
      } // Fl_Check_Button* btn_udp_State
      { Fl_Check_Button* o = btn_udp_Age = new Fl_Check_Button(13, 348, 70, 15, _("Age"));
        btn_udp_Age->down_box(FL_DOWN_BOX);
        btn_udp_Age->callback((Fl_Callback*)cb_btn_udp_Age);
        o->value(udp_fields.age);
      } // Fl_Check_Button* btn_udp_Age
      { Fl_Check_Button* o = btn_udp_StaCall = new Fl_Check_Button(147, 26, 70, 15, _("Station Call"));
        btn_udp_StaCall->down_box(FL_DOWN_BOX);
        btn_udp_StaCall->callback((Fl_Callback*)cb_btn_udp_StaCall);
        o->value(udp_fields.sta_call);
      } // Fl_Check_Button* btn_udp_StaCall
      { Fl_Check_Button* o = btn_udp_StaCity = new Fl_Check_Button(147, 47, 70, 15, _("Station QTH"));
        btn_udp_StaCity->down_box(FL_DOWN_BOX);
        btn_udp_StaCity->callback((Fl_Callback*)cb_btn_udp_StaCity);
        o->value(udp_fields.mycity);
      } // Fl_Check_Button* btn_udp_StaCity
      { Fl_Check_Button* o = btn_udp_StaGrid = new Fl_Check_Button(147, 68, 70, 15, _("Station LOC"));
        btn_udp_StaGrid->down_box(FL_DOWN_BOX);
        btn_udp_StaGrid->callback((Fl_Callback*)cb_btn_udp_StaGrid);
        o->value(udp_fields.mygrid);
      } // Fl_Check_Button* btn_udp_StaGrid
      { Fl_Check_Button* o = btn_udp_Operator = new Fl_Check_Button(147, 90, 70, 15, _("Operator"));
        btn_udp_Operator->down_box(FL_DOWN_BOX);
        btn_udp_Operator->callback((Fl_Callback*)cb_btn_udp_Operator);
        o->value(udp_fields.op_call);
      } // Fl_Check_Button* btn_udp_Operator
      { Fl_Check_Button* o = btn_udp_Province = new Fl_Check_Button(147, 111, 70, 15, _("Province"));
        btn_udp_Province->down_box(FL_DOWN_BOX);
        btn_udp_Province->callback((Fl_Callback*)cb_btn_udp_Province);
        o->value(udp_fields.province);
      } // Fl_Check_Button* btn_udp_Province
      { Fl_Check_Button* o = btn_udp_Country = new Fl_Check_Button(147, 133, 70, 15, _("Country"));
        btn_udp_Country->down_box(FL_DOWN_BOX);
        btn_udp_Country->callback((Fl_Callback*)cb_btn_udp_Country);
        o->value(udp_fields.country);
      } // Fl_Check_Button* btn_udp_Country
      { Fl_Check_Button* o = btn_udp_Notes = new Fl_Check_Button(147, 154, 70, 15, _("Notes"));
        btn_udp_Notes->down_box(FL_DOWN_BOX);
        btn_udp_Notes->callback((Fl_Callback*)cb_btn_udp_Notes);
        o->value(udp_fields.notes);
      } // Fl_Check_Button* btn_udp_Notes
      { Fl_Check_Button* o = btn_udp_QSLrcvd = new Fl_Check_Button(147, 176, 70, 15, _("QSL rcvd date"));
        btn_udp_QSLrcvd->down_box(FL_DOWN_BOX);
        btn_udp_QSLrcvd->callback((Fl_Callback*)cb_btn_udp_QSLrcvd);
        o->value(udp_fields.qsl_rcvd);
      } // Fl_Check_Button* btn_udp_QSLrcvd
      { Fl_Check_Button* o = btn_udp_QSLsent = new Fl_Check_Button(147, 197, 70, 15, _("QSL sent date"));
        btn_udp_QSLsent->down_box(FL_DOWN_BOX);
        btn_udp_QSLsent->callback((Fl_Callback*)cb_btn_udp_QSLsent);
        o->value(udp_fields.qsl_sent);
      } // Fl_Check_Button* btn_udp_QSLsent
      { Fl_Check_Button* o = btn_udp_eQSLrcvd = new Fl_Check_Button(147, 219, 70, 15, _("eQSL rcvd date"));
        btn_udp_eQSLrcvd->down_box(FL_DOWN_BOX);
        btn_udp_eQSLrcvd->callback((Fl_Callback*)cb_btn_udp_eQSLrcvd);
        o->value(udp_fields.eqsl_rcvd);
      } // Fl_Check_Button* btn_udp_eQSLrcvd
      { Fl_Check_Button* o = btn_udp_eQSLsent = new Fl_Check_Button(147, 240, 70, 15, _("eQSL sent date"));
        btn_udp_eQSLsent->down_box(FL_DOWN_BOX);
        btn_udp_eQSLsent->callback((Fl_Callback*)cb_btn_udp_eQSLsent);
        o->value(udp_fields.eqsl_sent);
      } // Fl_Check_Button* btn_udp_eQSLsent
      { Fl_Check_Button* o = btn_udp_LOTWrcvd = new Fl_Check_Button(147, 262, 70, 15, _("LoTW rcvd date"));
        btn_udp_LOTWrcvd->down_box(FL_DOWN_BOX);
        btn_udp_LOTWrcvd->callback((Fl_Callback*)cb_btn_udp_LOTWrcvd);
        o->value(udp_fields.lotw_rcvd);
      } // Fl_Check_Button* btn_udp_LOTWrcvd
      { Fl_Check_Button* o = btn_udp_LOTWsent = new Fl_Check_Button(147, 283, 70, 15, _("LoTW sent date"));
        btn_udp_LOTWsent->down_box(FL_DOWN_BOX);
        btn_udp_LOTWsent->callback((Fl_Callback*)cb_btn_udp_LOTWsent);
        o->value(udp_fields.lotw_sent);
      } // Fl_Check_Button* btn_udp_LOTWsent
      { Fl_Check_Button* o = btn_udp_QSL_VIA = new Fl_Check_Button(147, 305, 70, 15, _("QSL-VIA"));
        btn_udp_QSL_VIA->down_box(FL_DOWN_BOX);
        btn_udp_QSL_VIA->callback((Fl_Callback*)cb_btn_udp_QSL_VIA);
        o->value(udp_fields.qsl_via);
      } // Fl_Check_Button* btn_udp_QSL_VIA
      { Fl_Check_Button* o = btn_udp_SerialIN = new Fl_Check_Button(147, 326, 70, 15, _("Serial # in"));
        btn_udp_SerialIN->down_box(FL_DOWN_BOX);
        btn_udp_SerialIN->callback((Fl_Callback*)cb_btn_udp_SerialIN);
        o->value(udp_fields.srx);
      } // Fl_Check_Button* btn_udp_SerialIN
      { Fl_Check_Button* o = btn_udp_SerialOUT = new Fl_Check_Button(147, 348, 70, 15, _("Serial # out"));
        btn_udp_SerialOUT->down_box(FL_DOWN_BOX);
        btn_udp_SerialOUT->callback((Fl_Callback*)cb_btn_udp_SerialOUT);
        o->value(udp_fields.stx);
      } // Fl_Check_Button* btn_udp_SerialOUT
      { Fl_Check_Button* o = btn_udp_Check = new Fl_Check_Button(281, 26, 70, 15, _("Check"));
        btn_udp_Check->down_box(FL_DOWN_BOX);
        btn_udp_Check->callback((Fl_Callback*)cb_btn_udp_Check);
        o->value(udp_fields.check);
      } // Fl_Check_Button* btn_udp_Check
      { Fl_Check_Button* o = btn_udp_XchgIn = new Fl_Check_Button(281, 47, 70, 15, _("Exchange In"));
        btn_udp_XchgIn->down_box(FL_DOWN_BOX);
        btn_udp_XchgIn->callback((Fl_Callback*)cb_btn_udp_XchgIn);
        o->value(udp_fields.xchg1);
      } // Fl_Check_Button* btn_udp_XchgIn
      { Fl_Check_Button* o = btn_udp_MyXchg = new Fl_Check_Button(281, 68, 70, 15, _("Exchange Out"));
        btn_udp_MyXchg->down_box(FL_DOWN_BOX);
        btn_udp_MyXchg->callback((Fl_Callback*)cb_btn_udp_MyXchg);
        o->value(udp_fields.myxchg);
      } // Fl_Check_Button* btn_udp_MyXchg
      { Fl_Check_Button* o = btn_udp_CNTY = new Fl_Check_Button(281, 90, 70, 15, _("County"));
        btn_udp_CNTY->down_box(FL_DOWN_BOX);
        btn_udp_CNTY->callback((Fl_Callback*)cb_btn_udp_CNTY);
        o->value(udp_fields.county);
      } // Fl_Check_Button* btn_udp_CNTY
      { Fl_Check_Button* o = btn_udp_CONT = new Fl_Check_Button(281, 111, 70, 15, _("Continent"));
        btn_udp_CONT->down_box(FL_DOWN_BOX);
        btn_udp_CONT->callback((Fl_Callback*)cb_btn_udp_CONT);
        o->value(udp_fields.continent);
      } // Fl_Check_Button* btn_udp_CONT
      { Fl_Check_Button* o = btn_udp_CQZ = new Fl_Check_Button(281, 133, 70, 15, _("CQZ"));
        btn_udp_CQZ->down_box(FL_DOWN_BOX);
        btn_udp_CQZ->callback((Fl_Callback*)cb_btn_udp_CQZ);
        o->value(udp_fields.cqz);
      } // Fl_Check_Button* btn_udp_CQZ
      { Fl_Check_Button* o = btn_udp_DXCC = new Fl_Check_Button(281, 154, 70, 15, _("DXCC"));
        btn_udp_DXCC->down_box(FL_DOWN_BOX);
        btn_udp_DXCC->callback((Fl_Callback*)cb_btn_udp_DXCC);
        o->value(udp_fields.dxcc);
      } // Fl_Check_Button* btn_udp_DXCC
      { Fl_Check_Button* o = btn_udp_IOTA = new Fl_Check_Button(281, 176, 70, 15, _("IOTA"));
        btn_udp_IOTA->down_box(FL_DOWN_BOX);
        btn_udp_IOTA->callback((Fl_Callback*)cb_btn_udp_IOTA);
        o->value(udp_fields.iota);
      } // Fl_Check_Button* btn_udp_IOTA
      { Fl_Check_Button* o = btn_udp_ITUZ = new Fl_Check_Button(281, 197, 70, 15, _("ITUZ"));
        btn_udp_ITUZ->down_box(FL_DOWN_BOX);
        btn_udp_ITUZ->callback((Fl_Callback*)cb_btn_udp_ITUZ);
        o->value(udp_fields.ituz);
      } // Fl_Check_Button* btn_udp_ITUZ
      { Fl_Check_Button* o = btn_udp_Class = new Fl_Check_Button(281, 219, 70, 15, _("FD class"));
        btn_udp_Class->down_box(FL_DOWN_BOX);
        btn_udp_Class->callback((Fl_Callback*)cb_btn_udp_Class);
        o->value(udp_fields.arrl_class);
      } // Fl_Check_Button* btn_udp_Class
      { Fl_Check_Button* o = btn_udp_Section = new Fl_Check_Button(281, 240, 70, 15, _("FD section"));
        btn_udp_Section->down_box(FL_DOWN_BOX);
        btn_udp_Section->callback((Fl_Callback*)cb_btn_udp_Section);
        o->value(udp_fields.arrl_sect);
      } // Fl_Check_Button* btn_udp_Section
      { Fl_Check_Button* o = btn_udp_cwss_serno = new Fl_Check_Button(281, 262, 70, 15, _("CW SS SerNo R"));
        btn_udp_cwss_serno->tooltip(_("CW sweepstakes rcvd ser. no."));
        btn_udp_cwss_serno->down_box(FL_DOWN_BOX);
        btn_udp_cwss_serno->callback((Fl_Callback*)cb_btn_udp_cwss_serno);
        o->value(udp_fields.cwss_serno);
      } // Fl_Check_Button* btn_udp_cwss_serno
      { Fl_Check_Button* o = btn_udp_cwss_prec = new Fl_Check_Button(281, 283, 70, 15, _("CW SS Prec\'"));
        btn_udp_cwss_prec->tooltip(_("CW sweepstakes precedence"));
        btn_udp_cwss_prec->down_box(FL_DOWN_BOX);
        btn_udp_cwss_prec->callback((Fl_Callback*)cb_btn_udp_cwss_prec);
        o->value(udp_fields.cwss_prec);
      } // Fl_Check_Button* btn_udp_cwss_prec
      { Fl_Check_Button* o = btn_udp_cwss_check = new Fl_Check_Button(281, 305, 70, 15, _("CW SS Check"));
        btn_udp_cwss_check->down_box(FL_DOWN_BOX);
        btn_udp_cwss_check->callback((Fl_Callback*)cb_btn_udp_cwss_check);
        o->value(udp_fields.cwss_check);
      } // Fl_Check_Button* btn_udp_cwss_check
      { Fl_Check_Button* o = btn_udp_cwss_section = new Fl_Check_Button(281, 326, 70, 15, _("CW SS Section"));
        btn_udp_cwss_section->tooltip(_("CW sweepstakes section"));
        btn_udp_cwss_section->down_box(FL_DOWN_BOX);
        btn_udp_cwss_section->callback((Fl_Callback*)cb_btn_udp_cwss_section);
        o->value(udp_fields.cwss_section);
      } // Fl_Check_Button* btn_udp_cwss_section
      { Fl_Check_Button* o = btn_udp_1010 = new Fl_Check_Button(281, 348, 70, 15, _("10-10"));
        btn_udp_1010->tooltip(_("CW sweepstakes section"));
        btn_udp_1010->down_box(FL_DOWN_BOX);
        btn_udp_1010->callback((Fl_Callback*)cb_btn_udp_1010);
        o->value(udp_fields.ten_ten);
      } // Fl_Check_Button* btn_udp_1010
      { btnUDPClearAllFields = new Fl_Button(8, 373, 85, 20, _("Clear All"));
        btnUDPClearAllFields->callback((Fl_Callback*)cb_btnUDPClearAllFields);
      } // Fl_Button* btnUDPClearAllFields
      { btnUDPCheckAllFields = new Fl_Button(101, 373, 85, 20, _("Check All"));
        btnUDPCheckAllFields->callback((Fl_Callback*)cb_btnUDPCheckAllFields);
      } // Fl_Button* btnUDPCheckAllFields
      { btnUDPOK = new Fl_Return_Button(308, 373, 85, 20, _("OK"));
        btnUDPOK->callback((Fl_Callback*)cb_btnUDPOK);
      } // Fl_Return_Button* btnUDPOK
      { btnUDPcancel = new Fl_Button(204, 373, 85, 20, _("Cancel"));
        btnUDPcancel->callback((Fl_Callback*)cb_btnUDPcancel);
      } // Fl_Button* btnUDPcancel
      o->end();
    } // Fl_Group* o
    wUDPfields->end();
  } // Fl_Double_Window* wUDPfields
  { wCLDfields = new Fl_Double_Window(423, 405, _("Cloud Log export fields"));
    { Fl_Group* o = new Fl_Group(5, 5, 410, 397, _("Select Fields to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { Fl_Check_Button* o = btn_cloud_Call = new Fl_Check_Button(13, 26, 70, 15, _("Call"));
        btn_cloud_Call->down_box(FL_DOWN_BOX);
        btn_cloud_Call->value(1);
        btn_cloud_Call->callback((Fl_Callback*)cb_btn_cloud_Call);
        o->value(cloud_fields.call);
      } // Fl_Check_Button* btn_cloud_Call
      { Fl_Check_Button* o = btn_cloud_Name = new Fl_Check_Button(13, 47, 70, 15, _("Name"));
        btn_cloud_Name->down_box(FL_DOWN_BOX);
        btn_cloud_Name->value(1);
        btn_cloud_Name->callback((Fl_Callback*)cb_btn_cloud_Name);
        o->value(cloud_fields.name);
      } // Fl_Check_Button* btn_cloud_Name
      { Fl_Check_Button* o = btn_cloud_Freq = new Fl_Check_Button(13, 68, 70, 15, _("Freq"));
        btn_cloud_Freq->down_box(FL_DOWN_BOX);
        btn_cloud_Freq->value(1);
        btn_cloud_Freq->callback((Fl_Callback*)cb_btn_cloud_Freq);
        o->value(cloud_fields.freq);
      } // Fl_Check_Button* btn_cloud_Freq
      { Fl_Check_Button* o = btn_cloud_Band = new Fl_Check_Button(13, 90, 70, 15, _("Band"));
        btn_cloud_Band->down_box(FL_DOWN_BOX);
        btn_cloud_Band->callback((Fl_Callback*)cb_btn_cloud_Band);
        o->value(cloud_fields.band);
      } // Fl_Check_Button* btn_cloud_Band
      { Fl_Check_Button* o = btn_cloud_Mode = new Fl_Check_Button(13, 111, 70, 15, _("Mode"));
        btn_cloud_Mode->down_box(FL_DOWN_BOX);
        btn_cloud_Mode->value(1);
        btn_cloud_Mode->callback((Fl_Callback*)cb_btn_cloud_Mode);
        o->value(cloud_fields.mode);
      } // Fl_Check_Button* btn_cloud_Mode
      { Fl_Check_Button* o = btn_cloud_QSOdateOn = new Fl_Check_Button(13, 133, 70, 15, _("QSO Date On"));
        btn_cloud_QSOdateOn->down_box(FL_DOWN_BOX);
        btn_cloud_QSOdateOn->value(1);
        btn_cloud_QSOdateOn->callback((Fl_Callback*)cb_btn_cloud_QSOdateOn);
        o->value(cloud_fields.date_on);
      } // Fl_Check_Button* btn_cloud_QSOdateOn
      { Fl_Check_Button* o = btn_cloud_QSOdateOff = new Fl_Check_Button(13, 154, 70, 15, _("QSO Date Off"));
        btn_cloud_QSOdateOff->down_box(FL_DOWN_BOX);
        btn_cloud_QSOdateOff->value(1);
        btn_cloud_QSOdateOff->callback((Fl_Callback*)cb_btn_cloud_QSOdateOff);
        o->value(cloud_fields.date_off);
      } // Fl_Check_Button* btn_cloud_QSOdateOff
      { Fl_Check_Button* o = btn_cloud_TimeON = new Fl_Check_Button(13, 176, 70, 15, _("Time ON"));
        btn_cloud_TimeON->down_box(FL_DOWN_BOX);
        btn_cloud_TimeON->value(1);
        btn_cloud_TimeON->callback((Fl_Callback*)cb_btn_cloud_TimeON);
        o->value(cloud_fields.time_on);
      } // Fl_Check_Button* btn_cloud_TimeON
      { Fl_Check_Button* o = btn_cloud_TimeOFF = new Fl_Check_Button(13, 197, 70, 15, _("Time OFF"));
        btn_cloud_TimeOFF->down_box(FL_DOWN_BOX);
        btn_cloud_TimeOFF->callback((Fl_Callback*)cb_btn_cloud_TimeOFF);
        o->value(cloud_fields.time_off);
      } // Fl_Check_Button* btn_cloud_TimeOFF
      { Fl_Check_Button* o = btn_cloud_TX_pwr = new Fl_Check_Button(13, 219, 70, 15, _("TX Power"));
        btn_cloud_TX_pwr->down_box(FL_DOWN_BOX);
        btn_cloud_TX_pwr->callback((Fl_Callback*)cb_btn_cloud_TX_pwr);
        o->value(cloud_fields.tx_pwr);
      } // Fl_Check_Button* btn_cloud_TX_pwr
      { Fl_Check_Button* o = btn_cloud_RSTsent = new Fl_Check_Button(13, 240, 70, 15, _("RST sent"));
        btn_cloud_RSTsent->down_box(FL_DOWN_BOX);
        btn_cloud_RSTsent->value(1);
        btn_cloud_RSTsent->callback((Fl_Callback*)cb_btn_cloud_RSTsent);
        o->value(cloud_fields.rst_sent);
      } // Fl_Check_Button* btn_cloud_RSTsent
      { Fl_Check_Button* o = btn_cloud_RSTrcvd = new Fl_Check_Button(13, 262, 70, 15, _("RST rcvd"));
        btn_cloud_RSTrcvd->down_box(FL_DOWN_BOX);
        btn_cloud_RSTrcvd->value(1);
        btn_cloud_RSTrcvd->callback((Fl_Callback*)cb_btn_cloud_RSTrcvd);
        o->value(cloud_fields.rst_rcvd);
      } // Fl_Check_Button* btn_cloud_RSTrcvd
      { Fl_Check_Button* o = btn_cloud_Qth = new Fl_Check_Button(13, 283, 70, 15, _("Qth"));
        btn_cloud_Qth->down_box(FL_DOWN_BOX);
        btn_cloud_Qth->callback((Fl_Callback*)cb_btn_cloud_Qth);
        o->value(cloud_fields.qth);
      } // Fl_Check_Button* btn_cloud_Qth
      { Fl_Check_Button* o = btn_cloud_LOC = new Fl_Check_Button(13, 305, 70, 15, _("LOC"));
        btn_cloud_LOC->down_box(FL_DOWN_BOX);
        btn_cloud_LOC->callback((Fl_Callback*)cb_btn_cloud_LOC);
        o->value(cloud_fields.gridsquare);
      } // Fl_Check_Button* btn_cloud_LOC
      { Fl_Check_Button* o = btn_cloud_State = new Fl_Check_Button(13, 326, 70, 15, _("State"));
        btn_cloud_State->down_box(FL_DOWN_BOX);
        btn_cloud_State->callback((Fl_Callback*)cb_btn_cloud_State);
        o->value(cloud_fields.state);
      } // Fl_Check_Button* btn_cloud_State
      { Fl_Check_Button* o = btn_cloud_Age = new Fl_Check_Button(13, 348, 70, 15, _("Age"));
        btn_cloud_Age->down_box(FL_DOWN_BOX);
        btn_cloud_Age->callback((Fl_Callback*)cb_btn_cloud_Age);
        o->value(cloud_fields.age);
      } // Fl_Check_Button* btn_cloud_Age
      { Fl_Check_Button* o = btn_cloud_StaCall = new Fl_Check_Button(147, 26, 70, 15, _("Station Call"));
        btn_cloud_StaCall->down_box(FL_DOWN_BOX);
        btn_cloud_StaCall->callback((Fl_Callback*)cb_btn_cloud_StaCall);
        o->value(cloud_fields.sta_call);
      } // Fl_Check_Button* btn_cloud_StaCall
      { Fl_Check_Button* o = btn_cloud_StaCity = new Fl_Check_Button(147, 47, 70, 15, _("Station QTH"));
        btn_cloud_StaCity->down_box(FL_DOWN_BOX);
        btn_cloud_StaCity->callback((Fl_Callback*)cb_btn_cloud_StaCity);
        o->value(cloud_fields.mycity);
      } // Fl_Check_Button* btn_cloud_StaCity
      { Fl_Check_Button* o = btn_cloud_StaGrid = new Fl_Check_Button(147, 68, 70, 15, _("Station LOC"));
        btn_cloud_StaGrid->down_box(FL_DOWN_BOX);
        btn_cloud_StaGrid->callback((Fl_Callback*)cb_btn_cloud_StaGrid);
        o->value(cloud_fields.mygrid);
      } // Fl_Check_Button* btn_cloud_StaGrid
      { Fl_Check_Button* o = btn_cloud_Operator = new Fl_Check_Button(147, 90, 70, 15, _("Operator"));
        btn_cloud_Operator->down_box(FL_DOWN_BOX);
        btn_cloud_Operator->callback((Fl_Callback*)cb_btn_cloud_Operator);
        o->value(cloud_fields.op_call);
      } // Fl_Check_Button* btn_cloud_Operator
      { Fl_Check_Button* o = btn_cloud_Province = new Fl_Check_Button(147, 111, 70, 15, _("Province"));
        btn_cloud_Province->down_box(FL_DOWN_BOX);
        btn_cloud_Province->callback((Fl_Callback*)cb_btn_cloud_Province);
        o->value(cloud_fields.province);
      } // Fl_Check_Button* btn_cloud_Province
      { Fl_Check_Button* o = btn_cloud_Country = new Fl_Check_Button(147, 133, 70, 15, _("Country"));
        btn_cloud_Country->down_box(FL_DOWN_BOX);
        btn_cloud_Country->callback((Fl_Callback*)cb_btn_cloud_Country);
        o->value(cloud_fields.country);
      } // Fl_Check_Button* btn_cloud_Country
      { Fl_Check_Button* o = btn_cloud_Notes = new Fl_Check_Button(147, 154, 70, 15, _("Notes"));
        btn_cloud_Notes->down_box(FL_DOWN_BOX);
        btn_cloud_Notes->callback((Fl_Callback*)cb_btn_cloud_Notes);
        o->value(cloud_fields.notes);
      } // Fl_Check_Button* btn_cloud_Notes
      { Fl_Check_Button* o = btn_cloud_QSLrcvd = new Fl_Check_Button(147, 176, 70, 15, _("QSL rcvd date"));
        btn_cloud_QSLrcvd->down_box(FL_DOWN_BOX);
        btn_cloud_QSLrcvd->callback((Fl_Callback*)cb_btn_cloud_QSLrcvd);
        o->value(cloud_fields.qsl_rcvd);
      } // Fl_Check_Button* btn_cloud_QSLrcvd
      { Fl_Check_Button* o = btn_cloud_QSLsent = new Fl_Check_Button(147, 197, 70, 15, _("QSL sent date"));
        btn_cloud_QSLsent->down_box(FL_DOWN_BOX);
        btn_cloud_QSLsent->callback((Fl_Callback*)cb_btn_cloud_QSLsent);
        o->value(cloud_fields.qsl_sent);
      } // Fl_Check_Button* btn_cloud_QSLsent
      { Fl_Check_Button* o = btn_cloud_eQSLrcvd = new Fl_Check_Button(147, 219, 70, 15, _("eQSL rcvd date"));
        btn_cloud_eQSLrcvd->down_box(FL_DOWN_BOX);
        btn_cloud_eQSLrcvd->callback((Fl_Callback*)cb_btn_cloud_eQSLrcvd);
        o->value(cloud_fields.eqsl_rcvd);
      } // Fl_Check_Button* btn_cloud_eQSLrcvd
      { Fl_Check_Button* o = btn_cloud_eQSLsent = new Fl_Check_Button(147, 240, 70, 15, _("eQSL sent date"));
        btn_cloud_eQSLsent->down_box(FL_DOWN_BOX);
        btn_cloud_eQSLsent->callback((Fl_Callback*)cb_btn_cloud_eQSLsent);
        o->value(cloud_fields.eqsl_sent);
      } // Fl_Check_Button* btn_cloud_eQSLsent
      { Fl_Check_Button* o = btn_cloud_LOTWrcvd = new Fl_Check_Button(147, 262, 70, 15, _("LoTW rcvd date"));
        btn_cloud_LOTWrcvd->down_box(FL_DOWN_BOX);
        btn_cloud_LOTWrcvd->callback((Fl_Callback*)cb_btn_cloud_LOTWrcvd);
        o->value(cloud_fields.lotw_rcvd);
      } // Fl_Check_Button* btn_cloud_LOTWrcvd
      { Fl_Check_Button* o = btn_cloud_LOTWsent = new Fl_Check_Button(147, 283, 70, 15, _("LoTW sent date"));
        btn_cloud_LOTWsent->down_box(FL_DOWN_BOX);
        btn_cloud_LOTWsent->callback((Fl_Callback*)cb_btn_cloud_LOTWsent);
        o->value(cloud_fields.lotw_sent);
      } // Fl_Check_Button* btn_cloud_LOTWsent
      { Fl_Check_Button* o = btn_cloud_QSL_VIA = new Fl_Check_Button(147, 305, 70, 15, _("QSL-VIA"));
        btn_cloud_QSL_VIA->down_box(FL_DOWN_BOX);
        btn_cloud_QSL_VIA->callback((Fl_Callback*)cb_btn_cloud_QSL_VIA);
        o->value(cloud_fields.qsl_via);
      } // Fl_Check_Button* btn_cloud_QSL_VIA
      { Fl_Check_Button* o = btn_cloud_SerialIN = new Fl_Check_Button(147, 326, 70, 15, _("Serial # in"));
        btn_cloud_SerialIN->down_box(FL_DOWN_BOX);
        btn_cloud_SerialIN->callback((Fl_Callback*)cb_btn_cloud_SerialIN);
        o->value(cloud_fields.srx);
      } // Fl_Check_Button* btn_cloud_SerialIN
      { Fl_Check_Button* o = btn_cloud_SerialOUT = new Fl_Check_Button(147, 348, 70, 15, _("Serial # out"));
        btn_cloud_SerialOUT->down_box(FL_DOWN_BOX);
        btn_cloud_SerialOUT->callback((Fl_Callback*)cb_btn_cloud_SerialOUT);
        o->value(cloud_fields.stx);
      } // Fl_Check_Button* btn_cloud_SerialOUT
      { Fl_Check_Button* o = btn_cloud_Check = new Fl_Check_Button(281, 26, 70, 15, _("Check"));
        btn_cloud_Check->down_box(FL_DOWN_BOX);
        btn_cloud_Check->callback((Fl_Callback*)cb_btn_cloud_Check);
        o->value(cloud_fields.check);
      } // Fl_Check_Button* btn_cloud_Check
      { Fl_Check_Button* o = btn_cloud_XchgIn = new Fl_Check_Button(281, 47, 70, 15, _("Exchange In"));
        btn_cloud_XchgIn->down_box(FL_DOWN_BOX);
        btn_cloud_XchgIn->callback((Fl_Callback*)cb_btn_cloud_XchgIn);
        o->value(cloud_fields.xchg1);
      } // Fl_Check_Button* btn_cloud_XchgIn
      { Fl_Check_Button* o = btn_cloud_MyXchg = new Fl_Check_Button(281, 68, 70, 15, _("Exchange Out"));
        btn_cloud_MyXchg->down_box(FL_DOWN_BOX);
        btn_cloud_MyXchg->callback((Fl_Callback*)cb_btn_cloud_MyXchg);
        o->value(cloud_fields.myxchg);
      } // Fl_Check_Button* btn_cloud_MyXchg
      { Fl_Check_Button* o = btn_cloud_CNTY = new Fl_Check_Button(281, 90, 70, 15, _("County"));
        btn_cloud_CNTY->down_box(FL_DOWN_BOX);
        btn_cloud_CNTY->callback((Fl_Callback*)cb_btn_cloud_CNTY);
        o->value(cloud_fields.county);
      } // Fl_Check_Button* btn_cloud_CNTY
      { Fl_Check_Button* o = btn_cloud_CONT = new Fl_Check_Button(281, 111, 70, 15, _("Continent"));
        btn_cloud_CONT->down_box(FL_DOWN_BOX);
        btn_cloud_CONT->callback((Fl_Callback*)cb_btn_cloud_CONT);
        o->value(cloud_fields.continent);
      } // Fl_Check_Button* btn_cloud_CONT
      { Fl_Check_Button* o = btn_cloud_CQZ = new Fl_Check_Button(281, 133, 70, 15, _("CQZ"));
        btn_cloud_CQZ->down_box(FL_DOWN_BOX);
        btn_cloud_CQZ->callback((Fl_Callback*)cb_btn_cloud_CQZ);
        o->value(cloud_fields.cqz);
      } // Fl_Check_Button* btn_cloud_CQZ
      { Fl_Check_Button* o = btn_cloud_DXCC = new Fl_Check_Button(281, 154, 70, 15, _("DXCC"));
        btn_cloud_DXCC->down_box(FL_DOWN_BOX);
        btn_cloud_DXCC->callback((Fl_Callback*)cb_btn_cloud_DXCC);
        o->value(cloud_fields.dxcc);
      } // Fl_Check_Button* btn_cloud_DXCC
      { Fl_Check_Button* o = btn_cloud_IOTA = new Fl_Check_Button(281, 176, 70, 15, _("IOTA"));
        btn_cloud_IOTA->down_box(FL_DOWN_BOX);
        btn_cloud_IOTA->callback((Fl_Callback*)cb_btn_cloud_IOTA);
        o->value(cloud_fields.iota);
      } // Fl_Check_Button* btn_cloud_IOTA
      { Fl_Check_Button* o = btn_cloud_ITUZ = new Fl_Check_Button(281, 197, 70, 15, _("ITUZ"));
        btn_cloud_ITUZ->down_box(FL_DOWN_BOX);
        btn_cloud_ITUZ->callback((Fl_Callback*)cb_btn_cloud_ITUZ);
        o->value(cloud_fields.ituz);
      } // Fl_Check_Button* btn_cloud_ITUZ
      { Fl_Check_Button* o = btn_cloud_Class = new Fl_Check_Button(281, 219, 70, 15, _("FD class"));
        btn_cloud_Class->down_box(FL_DOWN_BOX);
        btn_cloud_Class->callback((Fl_Callback*)cb_btn_cloud_Class);
        o->value(cloud_fields.arrl_class);
      } // Fl_Check_Button* btn_cloud_Class
      { Fl_Check_Button* o = btn_cloud_Section = new Fl_Check_Button(281, 240, 70, 15, _("FD section"));
        btn_cloud_Section->down_box(FL_DOWN_BOX);
        btn_cloud_Section->callback((Fl_Callback*)cb_btn_cloud_Section);
        o->value(cloud_fields.arrl_sect);
      } // Fl_Check_Button* btn_cloud_Section
      { Fl_Check_Button* o = btn_cloud_cwss_serno = new Fl_Check_Button(281, 262, 70, 15, _("CW SS SerNo R"));
        btn_cloud_cwss_serno->tooltip(_("CW sweepstakes rcvd ser. no."));
        btn_cloud_cwss_serno->down_box(FL_DOWN_BOX);
        btn_cloud_cwss_serno->callback((Fl_Callback*)cb_btn_cloud_cwss_serno);
        o->value(cloud_fields.cwss_serno);
      } // Fl_Check_Button* btn_cloud_cwss_serno
      { Fl_Check_Button* o = btn_cloud_cwss_prec = new Fl_Check_Button(281, 283, 70, 15, _("CW SS Prec\'"));
        btn_cloud_cwss_prec->tooltip(_("CW sweepstakes precedence"));
        btn_cloud_cwss_prec->down_box(FL_DOWN_BOX);
        btn_cloud_cwss_prec->callback((Fl_Callback*)cb_btn_cloud_cwss_prec);
        o->value(cloud_fields.cwss_prec);
      } // Fl_Check_Button* btn_cloud_cwss_prec
      { Fl_Check_Button* o = btn_cloud_cwss_check = new Fl_Check_Button(281, 305, 70, 15, _("CW SS Check"));
        btn_cloud_cwss_check->down_box(FL_DOWN_BOX);
        btn_cloud_cwss_check->callback((Fl_Callback*)cb_btn_cloud_cwss_check);
        o->value(cloud_fields.cwss_check);
      } // Fl_Check_Button* btn_cloud_cwss_check
      { Fl_Check_Button* o = btn_cloud_cwss_section = new Fl_Check_Button(281, 326, 70, 15, _("CW SS Section"));
        btn_cloud_cwss_section->tooltip(_("CW sweepstakes section"));
        btn_cloud_cwss_section->down_box(FL_DOWN_BOX);
        btn_cloud_cwss_section->callback((Fl_Callback*)cb_btn_cloud_cwss_section);
        o->value(cloud_fields.cwss_section);
      } // Fl_Check_Button* btn_cloud_cwss_section
      { Fl_Check_Button* o = btn_cloud_1010 = new Fl_Check_Button(281, 348, 70, 15, _("10-10"));
        btn_cloud_1010->tooltip(_("CW sweepstakes section"));
        btn_cloud_1010->down_box(FL_DOWN_BOX);
        btn_cloud_1010->callback((Fl_Callback*)cb_btn_cloud_1010);
        o->value(cloud_fields.ten_ten);
      } // Fl_Check_Button* btn_cloud_1010
      { btnCLDClearAllFields = new Fl_Button(8, 373, 85, 20, _("Clear All"));
        btnCLDClearAllFields->callback((Fl_Callback*)cb_btnCLDClearAllFields);
      } // Fl_Button* btnCLDClearAllFields
      { btnCLDCheckAllFields = new Fl_Button(101, 373, 85, 20, _("Check All"));
        btnCLDCheckAllFields->callback((Fl_Callback*)cb_btnCLDCheckAllFields);
      } // Fl_Button* btnCLDCheckAllFields
      { btnCLDOK = new Fl_Return_Button(308, 373, 85, 20, _("OK"));
        btnCLDOK->callback((Fl_Callback*)cb_btnCLDOK);
      } // Fl_Return_Button* btnCLDOK
      { btnCLDcancel = new Fl_Button(204, 373, 85, 20, _("Cancel"));
        btnCLDcancel->callback((Fl_Callback*)cb_btnCLDcancel);
      } // Fl_Button* btnCLDcancel
      o->end();
    } // Fl_Group* o
    wCLDfields->end();
  } // Fl_Double_Window* wCLDfields
}
